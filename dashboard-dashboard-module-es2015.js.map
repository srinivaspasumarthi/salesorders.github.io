{"version":3,"sources":["webpack:///./node_modules/ngx-pipes/fesm2015/ngx-pipes.js","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/header/header.component.html","webpack:///./src/app/lines/lines.component.html","webpack:///./src/app/orderedit/orderedit.component.html","webpack:///./src/app/orderview/orderview.component.html","webpack:///./src/app/view/view.component.html","webpack:///./src/app/dashboard/dashboard.component.scss","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/dashboard/dashboard.module.ts","webpack:///./src/app/header/header.component.scss","webpack:///./src/app/header/header.component.ts","webpack:///./src/app/linedata.service.ts","webpack:///./src/app/lines/lines.component.scss","webpack:///./src/app/lines/lines.component.ts","webpack:///./src/app/orderedit/orderedit.component.scss","webpack:///./src/app/orderedit/orderedit.component.ts","webpack:///./src/app/orderview/orderview.component.scss","webpack:///./src/app/orderview/orderview.component.ts","webpack:///./src/app/view/view.component.scss","webpack:///./src/app/view/view.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACY;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,0DAAI,EAAE,uBAAuB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI,EAAE,iBAAiB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,6BAA6B;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI,EAAE,iBAAiB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAU;AACxC,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,0DAAI,EAAE,qCAAqC;AAC/C;;AAEA;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,0DAAI,EAAE,sCAAsC;AAChD;;AAEA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,0DAAI,EAAE,qCAAqC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI,EAAE,oBAAoB;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAU;AAC/B,IAAI,8DAAQ;AACZ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI,EAAE,iBAAiB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD,SAAS,IAAI;AACb;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD,SAAS,IAAI;AACb;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD,SAAS,IAAI;AACb;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI,EAAE,iBAAiB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,aAAa;AAChG,SAAS,IAAI;AACb;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAiD,GAAG,aAAa;AAC3F;AACA;AACA,wDAAwD,aAAa,SAAS,aAAa;AAC3F;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA,6DAA6D,MAAM;AACnE;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI,EAAE,iBAAiB;AAC3B;;AAEA;AACA;AACA,4DAA4D,MAAM;AAClE;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA,iDAAiD,sBAAsB;AACvE;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI,EAAE,oBAAoB;AAC9B;;AAEA;AACA;AACA,6DAA6D,MAAM,MAAM,MAAM;AAC/E;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmaAAa;AACb;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C,aAAa;AACb;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI,EAAE,qBAAqB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,OAAO;AACluBAAuB,wDAAU;AACjC,IAAI,0DAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,8DAAQ;AACZ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI,EAAE,cAAc;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI,EAAE,cAAc;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI,EAAE,qBAAqB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAU;AACpB,IAAI,0DAAI,EAAE,cAAc;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,cAAc;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAU;AACrB,IAAI,0DAAI,EAAE,eAAe;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,aAAa,2BAA2B;AACxC,aAAa,8BAA8B;AAC3C,aAAa,gCAAgC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,IAAI,GAAG,YAAY;AACrC;AACA;AACA,YAAY,wDAAU;AACtB,IAAI,0DAAI,EAAE,gBAAgB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,8DAAQ;AACZ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI,EAAE,oBAAoB;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB,IAAI,0DAAI,EAAE,iBAAiB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,0DAAI,EAAE,sBAAsB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI,EAAE,qBAAqB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,wDAAU;AACxB,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAU;AACzB,IAAI,0DAAI,EAAE,mBAAmB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAU;AACnC,IAAI,0DAAI,EAAE,6BAA6B;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,0DAAI,EAAE,wBAAwB;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,IAAI,0DAAI,EAAE,0BAA0B;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAU;AAC1B,IAAI,0DAAI,EAAE,oBAAoB;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAU;AAC7B,IAAI,0DAAI,EAAE,uBAAuB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IAAI,0DAAI,EAAE,wBAAwB;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,0DAAI,EAAE,2BAA2B;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAU;AAC3B,IAAI,0DAAI,EAAE,qBAAqB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,IAAI,8DAAQ;AACZ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,OAAO;AAC7G;AACA;AACA;AACA,oDAAoD,KAAK,GAAG,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,6CAA6C;AAClD,KAAK,gDAAgD;AACrD,KAAK,6CAA6C;AAClD,KAAK,4CAA4C;AACjD,KAAK,gDAAgD;AACrD,KAAK,+CAA+C;AACpD;AACA,8BAA8B,wDAAU;AACxC,IAAI,0DAAI,EAAE,kBAAkB;AAC5B;;AAEA;AACA;AACA;AACA,oBAAoB,wDAAU;AAC9B,IA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","file":"dashboard-dashboard-module-es2015.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { Pipe, NgModule } from '@angular/core';\n\nlet DiffPipe = class DiffPipe {\n    transform(input, ...args) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        // tslint:disable-next-line no-bitwise\n        return args.reduce((d, c) => d.filter((e) => !~c.indexOf(e)), input);\n    }\n};\nDiffPipe = __decorate([\n    Pipe({ name: 'diff' })\n], DiffPipe);\n\nlet InitialPipe = class InitialPipe {\n    transform(input, num = 0) {\n        return Array.isArray(input) ? input.slice(0, input.length - num) : input;\n    }\n};\nInitialPipe = __decorate([\n    Pipe({ name: 'initial' })\n], InitialPipe);\n\nlet FlattenPipe = class FlattenPipe {\n    transform(input, shallow = false) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        return shallow ? [].concat.apply([], input) : this.flatten(input);\n    }\n    flatten(array) {\n        return array.reduce((arr, elm) => {\n            if (Array.isArray(elm)) {\n                return arr.concat(this.flatten(elm));\n            }\n            return arr.concat(elm);\n        }, []);\n    }\n};\nFlattenPipe = __decorate([\n    Pipe({ name: 'flatten' })\n], FlattenPipe);\n\nlet IntersectionPipe = class IntersectionPipe {\n    transform(input, ...args) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        // tslint:disable-next-line no-bitwise\n        return args.reduce((n, c) => n.filter((e) => !!~c.indexOf(e)), input);\n    }\n};\nIntersectionPipe = __decorate([\n    Pipe({ name: 'intersection' })\n], IntersectionPipe);\n\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\nfunction isObject(value) {\n    return value !== null && typeof value === 'object';\n}\nfunction isNumberFinite(value) {\n    return isNumber(value) && isFinite(value);\n}\nfunction isVowel(letter) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    return vowels.indexOf(letter) !== -1;\n}\nfunction ucFirst(text) {\n    const [part, ...split] = text.split(/\\s/g);\n    const ucd = part\n        .toLowerCase()\n        .split(/(?=['|-])/g)\n        .map((word) => word.indexOf('-') + word.indexOf(\"'\") > -2\n        ? word.slice(0, 2).toUpperCase() + word.slice(2)\n        : word.slice(0, 1).toUpperCase() + word.slice(1))\n        .join('');\n    return [ucd, ...split].join(' ');\n}\nfunction applyPrecision(num, precision) {\n    if (precision <= 0) {\n        return Math.round(num);\n    }\n    const tho = Math.pow(10, precision);\n    return Math.round(num * tho) / tho;\n}\nfunction extractDeepPropertyByMapKey(obj, map) {\n    const keys = map.split('.');\n    const head = keys.shift();\n    return keys.reduce((prop, key) => {\n        return !isUndefined(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;\n    }, obj[head || '']);\n}\nfunction extractDeepPropertyByParentMapKey(obj, map) {\n    const keys = map.split('.');\n    const tail = keys.pop();\n    const props = extractDeepPropertyByMapKey(obj, keys.join('.'));\n    return { props, tail };\n}\nfunction getKeysTwoObjects(obj, other) {\n    return [...Object.keys(obj), ...Object.keys(other)].filter((key, index, array) => array.indexOf(key) === index);\n}\nfunction isDeepEqual(obj, other) {\n    if (!isObject(obj) || !isObject(other)) {\n        return obj === other;\n    }\n    return getKeysTwoObjects(obj, other).every((key) => {\n        if (!isObject(obj[key]) && !isObject(other[key])) {\n            return obj[key] === other[key];\n        }\n        if (!isObject(obj[key]) || !isObject(other[key])) {\n            return false;\n        }\n        return isDeepEqual(obj[key], other[key]);\n    });\n}\n\nlet ReversePipe = class ReversePipe {\n    transform(input) {\n        if (isString(input)) {\n            return input\n                .split('')\n                .reverse()\n                .join('');\n        }\n        return Array.isArray(input) ? input.slice().reverse() : input;\n    }\n};\nReversePipe = __decorate([\n    Pipe({ name: 'reverse' })\n], ReversePipe);\n\nlet TailPipe = class TailPipe {\n    transform(input, num = 0) {\n        return Array.isArray(input) ? input.slice(num) : input;\n    }\n};\nTailPipe = __decorate([\n    Pipe({ name: 'tail' })\n], TailPipe);\n\nlet TrurthifyPipe = class TrurthifyPipe {\n    transform(input) {\n        return Array.isArray(input) ? input.filter(e => !!e) : input;\n    }\n};\nTrurthifyPipe = __decorate([\n    Pipe({ name: 'truthify' })\n], TrurthifyPipe);\n\nlet UnionPipe = class UnionPipe {\n    transform(input, args = []) {\n        if (!Array.isArray(input) || !Array.isArray(args)) {\n            return input;\n        }\n        return args.reduce((newArr, currArr) => {\n            return newArr.concat(currArr.reduce((noDupArr, curr) => {\n                // tslint:disable-next-line:no-bitwise\n                return !~noDupArr.indexOf(curr) && !~newArr.indexOf(curr) ? noDupArr.concat([curr]) : noDupArr;\n            }, []));\n        }, input);\n    }\n};\nUnionPipe = __decorate([\n    Pipe({ name: 'union' })\n], UnionPipe);\n\nlet UniquePipe = class UniquePipe {\n    transform(input, propertyName) {\n        const uniques = [];\n        return Array.isArray(input)\n            ? isUndefined(propertyName)\n                ? input.filter((e, i) => input.indexOf(e) === i)\n                : input.filter((e, i) => {\n                    let value = extractDeepPropertyByMapKey(e, propertyName);\n                    value = isObject(value) ? JSON.stringify(value) : value;\n                    if (isUndefined(value) || uniques[value]) {\n                        return false;\n                    }\n                    uniques[value] = true;\n                    return true;\n                })\n            : input;\n    }\n};\nUniquePipe = __decorate([\n    Pipe({ name: 'unique' })\n], UniquePipe);\n\nlet WithoutPipe = class WithoutPipe {\n    transform(input, args = []) {\n        return Array.isArray(input)\n            ? // tslint:disable-next-line:no-bitwise\n                input.filter(e => !~args.indexOf(e))\n            : input;\n    }\n};\nWithoutPipe = __decorate([\n    Pipe({ name: 'without' })\n], WithoutPipe);\n\nlet PluckPipe = class PluckPipe {\n    transform(input, map) {\n        if (Array.isArray(input)) {\n            return input.map(e => extractDeepPropertyByMapKey(e, map));\n        }\n        return isObject(input) ? extractDeepPropertyByMapKey(input, map) : input;\n    }\n};\nPluckPipe = __decorate([\n    Pipe({ name: 'pluck', pure: false })\n], PluckPipe);\n\nlet ShufflePipe = class ShufflePipe {\n    // Using a version of the Fisher-Yates shuffle algorithm\n    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n    transform(input) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        const shuffled = [...input];\n        const n = input.length - 1;\n        for (let i = 0; i < n; ++i) {\n            const j = Math.floor(Math.random() * (n - i + 1)) + i;\n            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n        }\n        return shuffled;\n    }\n};\nShufflePipe = __decorate([\n    Pipe({ name: 'shuffle' })\n], ShufflePipe);\n\nlet EveryPipe = class EveryPipe {\n    transform(input, predicate) {\n        return Array.isArray(input) ? input.every(predicate) : false;\n    }\n};\nEveryPipe = __decorate([\n    Pipe({ name: 'every' })\n], EveryPipe);\n\nlet SomePipe = class SomePipe {\n    transform(input, predicate) {\n        return Array.isArray(input) ? input.some(predicate) : input;\n    }\n};\nSomePipe = __decorate([\n    Pipe({ name: 'some' })\n], SomePipe);\n\nlet SamplePipe = class SamplePipe {\n    transform(input, len = 1) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        let sample = [];\n        const tmp = [...input];\n        const l = len < tmp.length ? len : tmp.length;\n        for (let i = 0; i < l; ++i) {\n            sample = sample.concat(tmp.splice(Math.floor(Math.random() * tmp.length), 1));\n        }\n        return sample;\n    }\n};\nSamplePipe = __decorate([\n    Pipe({ name: 'sample' })\n], SamplePipe);\n\nlet GroupByPipe = class GroupByPipe {\n    transform(input, discriminator = [], delimiter = '|') {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        return this.groupBy(input, discriminator, delimiter);\n    }\n    groupBy(list, discriminator, delimiter) {\n        return list.reduce((acc, payload) => {\n            const key = this.extractKeyByDiscriminator(discriminator, payload, delimiter);\n            acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];\n            return acc;\n        }, {});\n    }\n    extractKeyByDiscriminator(discriminator, payload, delimiter) {\n        if (isFunction(discriminator)) {\n            return discriminator(payload);\n        }\n        if (Array.isArray(discriminator)) {\n            return discriminator.map(k => extractDeepPropertyByMapKey(payload, k)).join(delimiter);\n        }\n        return extractDeepPropertyByMapKey(payload, discriminator);\n    }\n};\nGroupByPipe = __decorate([\n    Pipe({ name: 'groupBy' })\n], GroupByPipe);\n\n// tslint:disable no-bitwise\nlet FilterByPipe = class FilterByPipe {\n    transform(input, props, search = '', strict = false) {\n        if (!Array.isArray(input) ||\n            (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {\n            return input;\n        }\n        const terms = String(search)\n            .toLowerCase()\n            .split(',');\n        return input.filter(obj => {\n            return props.some(prop => {\n                return terms.some(term => {\n                    const value = extractDeepPropertyByMapKey(obj, prop);\n                    /* tslint:disable */\n                    const { props, tail } = extractDeepPropertyByParentMapKey(obj, prop);\n                    if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {\n                        return props.some(parent => {\n                            const str = String(parent[tail]).toLowerCase();\n                            return strict ? str === term : !!~str.indexOf(term);\n                        });\n                    }\n                    if (isUndefined(value)) {\n                        return false;\n                    }\n                    const strValue = String(value).toLowerCase();\n                    return strict ? term === strValue : !!~strValue.indexOf(term);\n                });\n            });\n        });\n    }\n};\nFilterByPipe = __decorate([\n    Pipe({ name: 'filterBy' })\n], FilterByPipe);\n\nvar OrderByPipe_1;\nlet OrderByPipe = OrderByPipe_1 = class OrderByPipe {\n    transform(input, config) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        const out = [...input];\n        // sort by multiple properties\n        if (Array.isArray(config)) {\n            return out.sort((a, b) => {\n                const l = config.length;\n                for (let i = 0; i < l; ++i) {\n                    const [prop, asc] = OrderByPipe_1.extractFromConfig(config[i]);\n                    const pos = OrderByPipe_1.orderCompare(prop, asc, a, b);\n                    if (pos !== 0) {\n                        return pos;\n                    }\n                }\n                return 0;\n            });\n        }\n        // sort by a single property value\n        if (isString(config)) {\n            const [prop, asc, sign] = OrderByPipe_1.extractFromConfig(config);\n            if (config.length === 1) {\n                // tslint:disable-next-line:switch-default\n                switch (sign) {\n                    case '+':\n                        return out.sort(OrderByPipe_1.simpleSort.bind(this));\n                    case '-':\n                        return out.sort(OrderByPipe_1.simpleSort.bind(this)).reverse();\n                }\n            }\n            return out.sort(OrderByPipe_1.orderCompare.bind(this, prop, asc));\n        }\n        // default sort by value\n        return out.sort(OrderByPipe_1.simpleSort.bind(this));\n    }\n    static simpleSort(a, b) {\n        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;\n    }\n    static orderCompare(prop, asc, a, b) {\n        const first = extractDeepPropertyByMapKey(a, prop);\n        const second = extractDeepPropertyByMapKey(b, prop);\n        if (first === second) {\n            return 0;\n        }\n        if (isUndefined(first) || first === '') {\n            return 1;\n        }\n        if (isUndefined(second) || second === '') {\n            return -1;\n        }\n        if (isString(first) && isString(second)) {\n            const pos = first.toLowerCase().localeCompare(second.toLowerCase());\n            return asc ? pos : -pos;\n        }\n        return asc ? first - second : second - first;\n    }\n    static extractFromConfig(config) {\n        const sign = config.substr(0, 1);\n        const prop = config.replace(/^[-+]/, '');\n        const asc = sign !== '-';\n        return [prop, asc, sign];\n    }\n};\nOrderByPipe = OrderByPipe_1 = __decorate([\n    Pipe({ name: 'orderBy' })\n], OrderByPipe);\n\n// tslint:disable use-pipe-transform-interface\nlet GroupByImpurePipe = class GroupByImpurePipe extends GroupByPipe {\n};\nGroupByImpurePipe = __decorate([\n    Pipe({ name: 'groupByImpure', pure: false })\n], GroupByImpurePipe);\n\n// tslint:disable use-pipe-transform-interface\nlet FilterByImpurePipe = class FilterByImpurePipe extends FilterByPipe {\n};\nFilterByImpurePipe = __decorate([\n    Pipe({ name: 'filterByImpure', pure: false })\n], FilterByImpurePipe);\n\n// tslint:disable use-pipe-transform-interface\nlet OrderByImpurePipe = class OrderByImpurePipe extends OrderByPipe {\n};\nOrderByImpurePipe = __decorate([\n    Pipe({ name: 'orderByImpure', pure: false })\n], OrderByImpurePipe);\n\nlet RangePipe = class RangePipe {\n    transform(start = 1, count = 0, step = 1) {\n        return Array(count)\n            .fill('')\n            .map((v, i) => step * i + start);\n    }\n};\nRangePipe = __decorate([\n    Pipe({ name: 'range' })\n], RangePipe);\n\nlet ChunkPipe = class ChunkPipe {\n    transform(input, size = 1) {\n        if (isString(input)) {\n            return this.chunk(input\n                .split(''), size);\n        }\n        return Array.isArray(input) ? this.chunk(input, size) : input;\n    }\n    chunk(input, size) {\n        return Array(Math.ceil(input.length / size))\n            .fill([])\n            .map((_, index) => index * size)\n            .map(begin => input.slice(begin, begin + size));\n    }\n};\nChunkPipe = __decorate([\n    Pipe({ name: 'chunk' })\n], ChunkPipe);\n\nlet FromPairsPipe = class FromPairsPipe {\n    transform(input) {\n        if (!Array.isArray(input)) {\n            return input;\n        }\n        return input.reduce((obj, arr) => {\n            if (!Array.isArray(arr)) {\n                return obj;\n            }\n            const [prop, val] = arr;\n            obj[prop] = val;\n            return obj;\n        }, {});\n    }\n};\nFromPairsPipe = __decorate([\n    Pipe({ name: 'fromPairs' })\n], FromPairsPipe);\n\nconst ARRAY_PIPES = [\n    DiffPipe,\n    FlattenPipe,\n    InitialPipe,\n    IntersectionPipe,\n    ReversePipe,\n    TailPipe,\n    TrurthifyPipe,\n    UnionPipe,\n    UniquePipe,\n    WithoutPipe,\n    PluckPipe,\n    ShufflePipe,\n    EveryPipe,\n    SomePipe,\n    SamplePipe,\n    GroupByPipe,\n    GroupByImpurePipe,\n    FilterByPipe,\n    FilterByImpurePipe,\n    OrderByPipe,\n    OrderByImpurePipe,\n    RangePipe,\n    ChunkPipe,\n    FromPairsPipe\n];\nlet NgArrayPipesModule = class NgArrayPipesModule {\n};\nNgArrayPipesModule = __decorate([\n    NgModule({\n        declarations: ARRAY_PIPES,\n        imports: [],\n        exports: ARRAY_PIPES,\n    })\n], NgArrayPipesModule);\n\nlet KeysPipe = class KeysPipe {\n    transform(obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj);\n    }\n};\nKeysPipe = __decorate([\n    Pipe({ name: 'keys' })\n], KeysPipe);\n\nlet ValuesPipe = class ValuesPipe {\n    transform(obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj).map(k => obj[k]);\n    }\n};\nValuesPipe = __decorate([\n    Pipe({ name: 'values' })\n], ValuesPipe);\n\nlet PairsPipe = class PairsPipe {\n    transform(obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.entries(obj);\n    }\n};\nPairsPipe = __decorate([\n    Pipe({ name: 'pairs' })\n], PairsPipe);\n\nlet PickPipe = class PickPipe {\n    transform(obj, ...args) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return args.reduce((o, k) => {\n            return Object.assign(o, { [k]: obj[k] });\n        }, {});\n    }\n};\nPickPipe = __decorate([\n    Pipe({ name: 'pick' })\n], PickPipe);\n\nlet OmitPipe = class OmitPipe {\n    transform(obj, ...args) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return (Object.keys(obj)\n            // tslint:disable-next-line:no-bitwise\n            .filter(k => !~args.indexOf(k))\n            .reduce((o, k) => {\n            return Object.assign(o, { [k]: obj[k] });\n        }, {}));\n    }\n};\nOmitPipe = __decorate([\n    Pipe({ name: 'omit' })\n], OmitPipe);\n\nlet InvertPipe = class InvertPipe {\n    transform(obj) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj).reduce((o, k) => {\n            return Object.assign(o, { [obj[k]]: k });\n        }, {});\n    }\n};\nInvertPipe = __decorate([\n    Pipe({ name: 'invert' })\n], InvertPipe);\n\nlet InvertByPipe = class InvertByPipe {\n    transform(obj, cb) {\n        if (Array.isArray(obj) || !isObject(obj)) {\n            return obj;\n        }\n        return Object.keys(obj).reduce((o, k) => {\n            const key = cb ? cb(obj[k]) : obj[k];\n            return Array.isArray(o[key]) ? (o[key].push(k), o) : Object.assign(o, { [key]: [k] });\n        }, {});\n    }\n};\nInvertByPipe = __decorate([\n    Pipe({ name: 'invertBy' })\n], InvertByPipe);\n\nlet DiffObjPipe = class DiffObjPipe {\n    transform(obj, original = {}) {\n        if (Array.isArray(obj) || Array.isArray(original) || !isObject(obj) || !isObject(original)) {\n            return {};\n        }\n        return getKeysTwoObjects(obj, original).reduce((diff, key) => {\n            if (!isDeepEqual(original[key], obj[key])) {\n                diff[key] = obj[key];\n            }\n            return diff;\n        }, {});\n    }\n};\nDiffObjPipe = __decorate([\n    Pipe({ name: 'diffObj' })\n], DiffObjPipe);\n\nconst OBJECT_PIPES = [KeysPipe, ValuesPipe, PairsPipe, PickPipe, InvertPipe, InvertByPipe, OmitPipe, DiffObjPipe];\nlet NgObjectPipesModule = class NgObjectPipesModule {\n};\nNgObjectPipesModule = __decorate([\n    NgModule({\n        declarations: OBJECT_PIPES,\n        imports: [],\n        exports: OBJECT_PIPES,\n    })\n], NgObjectPipesModule);\n\nlet AorAnPipe = \n/**\n * Takes a string and returns the string prepended by 'a' or 'an'.\n * Uses both naive and holdout-list approaches.\n * @constructor\n * @param {string} stringEntity - Entity to prepend 'a' or 'an' to.\n */\nclass AorAnPipe {\n    constructor() {\n        this.irregularMap = {\n            herb: 'an',\n            honor: 'an',\n            honorable: 'an',\n            hour: 'an',\n            mba: 'an',\n            msc: 'an',\n            'm.sc.': 'an',\n            unicorn: 'a',\n        };\n    }\n    transform(stringEntity) {\n        if (!stringEntity || stringEntity === '') {\n            return '';\n        }\n        else {\n            const firstWord = stringEntity.trim().split(' ')[0];\n            if (this.irregularMap[firstWord.toLocaleLowerCase()]) {\n                return `${this.irregularMap[firstWord.toLocaleLowerCase()]} ${stringEntity}`;\n            }\n            else {\n                return isVowel(stringEntity[0]) ? `an ${stringEntity}` : `a ${stringEntity}`;\n            }\n        }\n    }\n};\nAorAnPipe = __decorate([\n    Pipe({\n        name: 'aOrAn',\n    })\n    /**\n     * Takes a string and returns the string prepended by 'a' or 'an'.\n     * Uses both naive and holdout-list approaches.\n     * @constructor\n     * @param {string} stringEntity - Entity to prepend 'a' or 'an' to.\n     */\n], AorAnPipe);\n\nlet UcWordsPipe = class UcWordsPipe {\n    transform(text) {\n        if (isString(text)) {\n            return text\n                .split(' ')\n                .map((sub) => ucFirst(sub))\n                .join(' ');\n        }\n        return text;\n    }\n};\nUcWordsPipe = __decorate([\n    Pipe({ name: 'ucwords' })\n], UcWordsPipe);\n\nlet LeftTrimPipe = class LeftTrimPipe {\n    transform(text, chars = '\\\\s') {\n        return isString(text) ? text.replace(new RegExp(`^[${chars}]+`), '') : text;\n    }\n};\nLeftTrimPipe = __decorate([\n    Pipe({ name: 'ltrim' })\n], LeftTrimPipe);\n\nlet RepeatPipe = class RepeatPipe {\n    transform(str, n = 1, separator = '') {\n        if (n <= 0) {\n            throw new RangeError();\n        }\n        return n === 1 ? str : this.repeat(str, n - 1, separator);\n    }\n    repeat(str, n, separator) {\n        return isString(str) ? (n === 0 ? str : str + separator + this.repeat(str, n - 1, separator)) : str;\n    }\n};\nRepeatPipe = __decorate([\n    Pipe({ name: 'repeat' })\n], RepeatPipe);\n\nlet RightTrimPipe = class RightTrimPipe {\n    transform(text, chars = '\\\\s') {\n        return isString(text) ? text.replace(new RegExp(`[${chars}]+$`), '') : text;\n    }\n};\nRightTrimPipe = __decorate([\n    Pipe({ name: 'rtrim' })\n], RightTrimPipe);\n\nlet ScanPipe = class ScanPipe {\n    transform(text, args = []) {\n        return isString(text)\n            ? text.replace(/\\{(\\d+)}/g, (match, index) => (!isUndefined(args[index]) ? args[index] : match))\n            : text;\n    }\n};\nScanPipe = __decorate([\n    Pipe({ name: 'scan' })\n], ScanPipe);\n\nlet ShortenPipe = class ShortenPipe {\n    transform(text, length = 0, suffix = '', wordBreak = true) {\n        if (!isString(text)) {\n            return text;\n        }\n        if (text.length > length) {\n            if (wordBreak) {\n                return text.slice(0, length) + suffix;\n            }\n            // tslint:disable-next-line:no-bitwise\n            if (!!~text.indexOf(' ', length)) {\n                return text.slice(0, text.indexOf(' ', length)) + suffix;\n            }\n        }\n        return text;\n    }\n};\nShortenPipe = __decorate([\n    Pipe({ name: 'shorten' })\n], ShortenPipe);\n\nlet StripTagsPipe = class StripTagsPipe {\n    transform(text, ...allowedTags) {\n        return allowedTags.length > 0\n            ? text.replace(new RegExp(`<(?!\\/?(${allowedTags.join('|')})\\s*\\/?)[^>]+>`, 'g'), '')\n            : text.replace(/<(?:.|\\s)*?>/g, '');\n    }\n};\nStripTagsPipe = __decorate([\n    Pipe({ name: 'stripTags' })\n], StripTagsPipe);\n\nlet TrimPipe = class TrimPipe {\n    transform(text, chars = '\\\\s') {\n        return isString(text) ? text.replace(new RegExp(`^[${chars}]+|[${chars}]+$`, 'g'), '') : text;\n    }\n};\nTrimPipe = __decorate([\n    Pipe({ name: 'trim' })\n], TrimPipe);\n\nlet UcFirstPipe = class UcFirstPipe {\n    transform(text) {\n        return isString(text) ? ucFirst(text) : text;\n    }\n};\nUcFirstPipe = __decorate([\n    Pipe({ name: 'ucfirst' })\n], UcFirstPipe);\n\nlet SlugifyPipe = class SlugifyPipe {\n    transform(str) {\n        return isString(str)\n            ? str\n                .toLowerCase()\n                .trim()\n                .replace(/[^\\w\\-]+/g, ' ')\n                .replace(/\\s+/g, '-')\n            : str;\n    }\n};\nSlugifyPipe = __decorate([\n    Pipe({ name: 'slugify' })\n], SlugifyPipe);\n\nlet CamelizePipe = class CamelizePipe {\n    transform(text, chars = '\\\\s') {\n        if (!isString(text)) {\n            return text;\n        }\n        return text\n            .toLowerCase()\n            .split(/[-_\\s]/g)\n            .filter((v) => !!v)\n            .map((word, key) => {\n            return !key ? word : word.slice(0, 1).toUpperCase() + word.slice(1);\n        })\n            .join('');\n    }\n};\nCamelizePipe = __decorate([\n    Pipe({ name: 'camelize' })\n], CamelizePipe);\n\nlet LatinisePipe = class LatinisePipe {\n    constructor() {\n        // Source: http://semplicewebsites.com/removing-accents-javascript\n        // tslint:disable-next-line whitespace max-line-length object-literal-key-quotes\n        this.latinMap = {\n            'Á': 'A',\n            'Ă': 'A',\n            'Ắ': 'A',\n            'Ặ': 'A',\n            'Ằ': 'A',\n            'Ẳ': 'A',\n            'Ẵ': 'A',\n            'Ǎ': 'A',\n            'Â': 'A',\n            'Ấ': 'A',\n            'Ậ': 'A',\n            'Ầ': 'A',\n            'Ẩ': 'A',\n            'Ẫ': 'A',\n            'Ä': 'A',\n            'Ǟ': 'A',\n            'Ȧ': 'A',\n            'Ǡ': 'A',\n            'Ạ': 'A',\n            'Ȁ': 'A',\n            'À': 'A',\n            'Ả': 'A',\n            'Ȃ': 'A',\n            'Ā': 'A',\n            'Ą': 'A',\n            'Å': 'A',\n            'Ǻ': 'A',\n            'Ḁ': 'A',\n            'Ⱥ': 'A',\n            'Ã': 'A',\n            'Ꜳ': 'AA',\n            'Æ': 'AE',\n            'Ǽ': 'AE',\n            'Ǣ': 'AE',\n            'Ꜵ': 'AO',\n            'Ꜷ': 'AU',\n            'Ꜹ': 'AV',\n            'Ꜻ': 'AV',\n            'Ꜽ': 'AY',\n            'Ḃ': 'B',\n            'Ḅ': 'B',\n            'Ɓ': 'B',\n            'Ḇ': 'B',\n            'Ƀ': 'B',\n            'Ƃ': 'B',\n            'Ć': 'C',\n            'Č': 'C',\n            'Ç': 'C',\n            'Ḉ': 'C',\n            'Ĉ': 'C',\n            'Ċ': 'C',\n            'Ƈ': 'C',\n            'Ȼ': 'C',\n            'Ď': 'D',\n            'Ḑ': 'D',\n            'Ḓ': 'D',\n            'Ḋ': 'D',\n            'Ḍ': 'D',\n            'Ɗ': 'D',\n            'Ḏ': 'D',\n            'ǲ': 'D',\n            'ǅ': 'D',\n            'Đ': 'D',\n            'Ƌ': 'D',\n            'Ǳ': 'DZ',\n            'Ǆ': 'DZ',\n            'É': 'E',\n            'Ĕ': 'E',\n            'Ě': 'E',\n            'Ȩ': 'E',\n            'Ḝ': 'E',\n            'Ê': 'E',\n            'Ế': 'E',\n            'Ệ': 'E',\n            'Ề': 'E',\n            'Ể': 'E',\n            'Ễ': 'E',\n            'Ḙ': 'E',\n            'Ë': 'E',\n            'Ė': 'E',\n            'Ẹ': 'E',\n            'Ȅ': 'E',\n            'È': 'E',\n            'Ẻ': 'E',\n            'Ȇ': 'E',\n            'Ē': 'E',\n            'Ḗ': 'E',\n            'Ḕ': 'E',\n            'Ę': 'E',\n            'Ɇ': 'E',\n            'Ẽ': 'E',\n            'Ḛ': 'E',\n            'Ꝫ': 'ET',\n            'Ḟ': 'F',\n            'Ƒ': 'F',\n            'Ǵ': 'G',\n            'Ğ': 'G',\n            'Ǧ': 'G',\n            'Ģ': 'G',\n            'Ĝ': 'G',\n            'Ġ': 'G',\n            'Ɠ': 'G',\n            'Ḡ': 'G',\n            'Ǥ': 'G',\n            'Ḫ': 'H',\n            'Ȟ': 'H',\n            'Ḩ': 'H',\n            'Ĥ': 'H',\n            'Ⱨ': 'H',\n            'Ḧ': 'H',\n            'Ḣ': 'H',\n            'Ḥ': 'H',\n            'Ħ': 'H',\n            'Í': 'I',\n            'Ĭ': 'I',\n            'Ǐ': 'I',\n            'Î': 'I',\n            'Ï': 'I',\n            'Ḯ': 'I',\n            'İ': 'I',\n            'Ị': 'I',\n            'Ȉ': 'I',\n            'Ì': 'I',\n            'Ỉ': 'I',\n            'Ȋ': 'I',\n            'Ī': 'I',\n            'Į': 'I',\n            'Ɨ': 'I',\n            'Ĩ': 'I',\n            'Ḭ': 'I',\n            'Ꝺ': 'D',\n            'Ꝼ': 'F',\n            'Ᵹ': 'G',\n            'Ꞃ': 'R',\n            'Ꞅ': 'S',\n            'Ꞇ': 'T',\n            'Ꝭ': 'IS',\n            'Ĵ': 'J',\n            'Ɉ': 'J',\n            'Ḱ': 'K',\n            'Ǩ': 'K',\n            'Ķ': 'K',\n            'Ⱪ': 'K',\n            'Ꝃ': 'K',\n            'Ḳ': 'K',\n            'Ƙ': 'K',\n            'Ḵ': 'K',\n            'Ꝁ': 'K',\n            'Ꝅ': 'K',\n            'Ĺ': 'L',\n            'Ƚ': 'L',\n            'Ľ': 'L',\n            'Ļ': 'L',\n            'Ḽ': 'L',\n            'Ḷ': 'L',\n            'Ḹ': 'L',\n            'Ⱡ': 'L',\n            'Ꝉ': 'L',\n            'Ḻ': 'L',\n            'Ŀ': 'L',\n            'Ɫ': 'L',\n            'ǈ': 'L',\n            'Ł': 'L',\n            'Ǉ': 'LJ',\n            'Ḿ': 'M',\n            'Ṁ': 'M',\n            'Ṃ': 'M',\n            'Ɱ': 'M',\n            'Ń': 'N',\n            'Ň': 'N',\n            'Ņ': 'N',\n            'Ṋ': 'N',\n            'Ṅ': 'N',\n            'Ṇ': 'N',\n            'Ǹ': 'N',\n            'Ɲ': 'N',\n            'Ṉ': 'N',\n            'Ƞ': 'N',\n            'ǋ': 'N',\n            'Ñ': 'N',\n            'Ǌ': 'NJ',\n            'Ó': 'O',\n            'Ŏ': 'O',\n            'Ǒ': 'O',\n            'Ô': 'O',\n            'Ố': 'O',\n            'Ộ': 'O',\n            'Ồ': 'O',\n            'Ổ': 'O',\n            'Ỗ': 'O',\n            'Ö': 'O',\n            'Ȫ': 'O',\n            'Ȯ': 'O',\n            'Ȱ': 'O',\n            'Ọ': 'O',\n            'Ő': 'O',\n            'Ȍ': 'O',\n            'Ò': 'O',\n            'Ỏ': 'O',\n            'Ơ': 'O',\n            'Ớ': 'O',\n            'Ợ': 'O',\n            'Ờ': 'O',\n            'Ở': 'O',\n            'Ỡ': 'O',\n            'Ȏ': 'O',\n            'Ꝋ': 'O',\n            'Ꝍ': 'O',\n            'Ō': 'O',\n            'Ṓ': 'O',\n            'Ṑ': 'O',\n            'Ɵ': 'O',\n            'Ǫ': 'O',\n            'Ǭ': 'O',\n            'Ø': 'O',\n            'Ǿ': 'O',\n            'Õ': 'O',\n            'Ṍ': 'O',\n            'Ṏ': 'O',\n            'Ȭ': 'O',\n            'Ƣ': 'OI',\n            'Ꝏ': 'OO',\n            'Ɛ': 'E',\n            'Ɔ': 'O',\n            'Ȣ': 'OU',\n            'Ṕ': 'P',\n            'Ṗ': 'P',\n            'Ꝓ': 'P',\n            'Ƥ': 'P',\n            'Ꝕ': 'P',\n            'Ᵽ': 'P',\n            'Ꝑ': 'P',\n            'Ꝙ': 'Q',\n            'Ꝗ': 'Q',\n            'Ŕ': 'R',\n            'Ř': 'R',\n            'Ŗ': 'R',\n            'Ṙ': 'R',\n            'Ṛ': 'R',\n            'Ṝ': 'R',\n            'Ȑ': 'R',\n            'Ȓ': 'R',\n            'Ṟ': 'R',\n            'Ɍ': 'R',\n            'Ɽ': 'R',\n            'Ꜿ': 'C',\n            'Ǝ': 'E',\n            'Ś': 'S',\n            'Ṥ': 'S',\n            'Š': 'S',\n            'Ṧ': 'S',\n            'Ş': 'S',\n            'Ŝ': 'S',\n            'Ș': 'S',\n            'Ṡ': 'S',\n            'Ṣ': 'S',\n            'Ṩ': 'S',\n            'ẞ': 'SS',\n            'Ť': 'T',\n            'Ţ': 'T',\n            'Ṱ': 'T',\n            'Ț': 'T',\n            'Ⱦ': 'T',\n            'Ṫ': 'T',\n            'Ṭ': 'T',\n            'Ƭ': 'T',\n            'Ṯ': 'T',\n            'Ʈ': 'T',\n            'Ŧ': 'T',\n            'Ɐ': 'A',\n            'Ꞁ': 'L',\n            'Ɯ': 'M',\n            'Ʌ': 'V',\n            'Ꜩ': 'TZ',\n            'Ú': 'U',\n            'Ŭ': 'U',\n            'Ǔ': 'U',\n            'Û': 'U',\n            'Ṷ': 'U',\n            'Ü': 'U',\n            'Ǘ': 'U',\n            'Ǚ': 'U',\n            'Ǜ': 'U',\n            'Ǖ': 'U',\n            'Ṳ': 'U',\n            'Ụ': 'U',\n            'Ű': 'U',\n            'Ȕ': 'U',\n            'Ù': 'U',\n            'Ủ': 'U',\n            'Ư': 'U',\n            'Ứ': 'U',\n            'Ự': 'U',\n            'Ừ': 'U',\n            'Ử': 'U',\n            'Ữ': 'U',\n            'Ȗ': 'U',\n            'Ū': 'U',\n            'Ṻ': 'U',\n            'Ų': 'U',\n            'Ů': 'U',\n            'Ũ': 'U',\n            'Ṹ': 'U',\n            'Ṵ': 'U',\n            'Ꝟ': 'V',\n            'Ṿ': 'V',\n            'Ʋ': 'V',\n            'Ṽ': 'V',\n            'Ꝡ': 'VY',\n            'Ẃ': 'W',\n            'Ŵ': 'W',\n            'Ẅ': 'W',\n            'Ẇ': 'W',\n            'Ẉ': 'W',\n            'Ẁ': 'W',\n            'Ⱳ': 'W',\n            'Ẍ': 'X',\n            'Ẋ': 'X',\n            'Ý': 'Y',\n            'Ŷ': 'Y',\n            'Ÿ': 'Y',\n            'Ẏ': 'Y',\n            'Ỵ': 'Y',\n            'Ỳ': 'Y',\n            'Ƴ': 'Y',\n            'Ỷ': 'Y',\n            'Ỿ': 'Y',\n            'Ȳ': 'Y',\n            'Ɏ': 'Y',\n            'Ỹ': 'Y',\n            'Ź': 'Z',\n            'Ž': 'Z',\n            'Ẑ': 'Z',\n            'Ⱬ': 'Z',\n            'Ż': 'Z',\n            'Ẓ': 'Z',\n            'Ȥ': 'Z',\n            'Ẕ': 'Z',\n            'Ƶ': 'Z',\n            'Ĳ': 'IJ',\n            'Œ': 'OE',\n            'ᴀ': 'A',\n            'ᴁ': 'AE',\n            'ʙ': 'B',\n            'ᴃ': 'B',\n            'ᴄ': 'C',\n            'ᴅ': 'D',\n            'ᴇ': 'E',\n            'ꜰ': 'F',\n            'ɢ': 'G',\n            'ʛ': 'G',\n            'ʜ': 'H',\n            'ɪ': 'I',\n            'ʁ': 'R',\n            'ᴊ': 'J',\n            'ᴋ': 'K',\n            'ʟ': 'L',\n            'ᴌ': 'L',\n            'ᴍ': 'M',\n            'ɴ': 'N',\n            'ᴏ': 'O',\n            'ɶ': 'OE',\n            'ᴐ': 'O',\n            'ᴕ': 'OU',\n            'ᴘ': 'P',\n            'ʀ': 'R',\n            'ᴎ': 'N',\n            'ᴙ': 'R',\n            'ꜱ': 'S',\n            'ᴛ': 'T',\n            'ⱻ': 'E',\n            'ᴚ': 'R',\n            'ᴜ': 'U',\n            'ᴠ': 'V',\n            'ᴡ': 'W',\n            'ʏ': 'Y',\n            'ᴢ': 'Z',\n            'á': 'a',\n            'ă': 'a',\n            'ắ': 'a',\n            'ặ': 'a',\n            'ằ': 'a',\n            'ẳ': 'a',\n            'ẵ': 'a',\n            'ǎ': 'a',\n            'â': 'a',\n            'ấ': 'a',\n            'ậ': 'a',\n            'ầ': 'a',\n            'ẩ': 'a',\n            'ẫ': 'a',\n            'ä': 'a',\n            'ǟ': 'a',\n            'ȧ': 'a',\n            'ǡ': 'a',\n            'ạ': 'a',\n            'ȁ': 'a',\n            'à': 'a',\n            'ả': 'a',\n            'ȃ': 'a',\n            'ā': 'a',\n            'ą': 'a',\n            'ᶏ': 'a',\n            'ẚ': 'a',\n            'å': 'a',\n            'ǻ': 'a',\n            'ḁ': 'a',\n            'ⱥ': 'a',\n            'ã': 'a',\n            'ꜳ': 'aa',\n            'æ': 'ae',\n            'ǽ': 'ae',\n            'ǣ': 'ae',\n            'ꜵ': 'ao',\n            'ꜷ': 'au',\n            'ꜹ': 'av',\n            'ꜻ': 'av',\n            'ꜽ': 'ay',\n            'ḃ': 'b',\n            'ḅ': 'b',\n            'ɓ': 'b',\n            'ḇ': 'b',\n            'ᵬ': 'b',\n            'ᶀ': 'b',\n            'ƀ': 'b',\n            'ƃ': 'b',\n            'ɵ': 'o',\n            'ć': 'c',\n            'č': 'c',\n            'ç': 'c',\n            'ḉ': 'c',\n            'ĉ': 'c',\n            'ɕ': 'c',\n            'ċ': 'c',\n            'ƈ': 'c',\n            'ȼ': 'c',\n            'ď': 'd',\n            'ḑ': 'd',\n            'ḓ': 'd',\n            'ȡ': 'd',\n            'ḋ': 'd',\n            'ḍ': 'd',\n            'ɗ': 'd',\n            'ᶑ': 'd',\n            'ḏ': 'd',\n            'ᵭ': 'd',\n            'ᶁ': 'd',\n            'đ': 'd',\n            'ɖ': 'd',\n            'ƌ': 'd',\n            'ı': 'i',\n            'ȷ': 'j',\n            'ɟ': 'j',\n            'ʄ': 'j',\n            'ǳ': 'dz',\n            'ǆ': 'dz',\n            'é': 'e',\n            'ĕ': 'e',\n            'ě': 'e',\n            'ȩ': 'e',\n            'ḝ': 'e',\n            'ê': 'e',\n            'ế': 'e',\n            'ệ': 'e',\n            'ề': 'e',\n            'ể': 'e',\n            'ễ': 'e',\n            'ḙ': 'e',\n            'ë': 'e',\n            'ė': 'e',\n            'ẹ': 'e',\n            'ȅ': 'e',\n            'è': 'e',\n            'ẻ': 'e',\n            'ȇ': 'e',\n            'ē': 'e',\n            'ḗ': 'e',\n            'ḕ': 'e',\n            'ⱸ': 'e',\n            'ę': 'e',\n            'ᶒ': 'e',\n            'ɇ': 'e',\n            'ẽ': 'e',\n            'ḛ': 'e',\n            'ꝫ': 'et',\n            'ḟ': 'f',\n            'ƒ': 'f',\n            'ᵮ': 'f',\n            'ᶂ': 'f',\n            'ǵ': 'g',\n            'ğ': 'g',\n            'ǧ': 'g',\n            'ģ': 'g',\n            'ĝ': 'g',\n            'ġ': 'g',\n            'ɠ': 'g',\n            'ḡ': 'g',\n            'ᶃ': 'g',\n            'ǥ': 'g',\n            'ḫ': 'h',\n            'ȟ': 'h',\n            'ḩ': 'h',\n            'ĥ': 'h',\n            'ⱨ': 'h',\n            'ḧ': 'h',\n            'ḣ': 'h',\n            'ḥ': 'h',\n            'ɦ': 'h',\n            'ẖ': 'h',\n            'ħ': 'h',\n            'ƕ': 'hv',\n            'í': 'i',\n            'ĭ': 'i',\n            'ǐ': 'i',\n            'î': 'i',\n            'ï': 'i',\n            'ḯ': 'i',\n            'ị': 'i',\n            'ȉ': 'i',\n            'ì': 'i',\n            'ỉ': 'i',\n            'ȋ': 'i',\n            'ī': 'i',\n            'į': 'i',\n            'ᶖ': 'i',\n            'ɨ': 'i',\n            'ĩ': 'i',\n            'ḭ': 'i',\n            'ꝺ': 'd',\n            'ꝼ': 'f',\n            'ᵹ': 'g',\n            'ꞃ': 'r',\n            'ꞅ': 's',\n            'ꞇ': 't',\n            'ꝭ': 'is',\n            'ǰ': 'j',\n            'ĵ': 'j',\n            'ʝ': 'j',\n            'ɉ': 'j',\n            'ḱ': 'k',\n            'ǩ': 'k',\n            'ķ': 'k',\n            'ⱪ': 'k',\n            'ꝃ': 'k',\n            'ḳ': 'k',\n            'ƙ': 'k',\n            'ḵ': 'k',\n            'ᶄ': 'k',\n            'ꝁ': 'k',\n            'ꝅ': 'k',\n            'ĺ': 'l',\n            'ƚ': 'l',\n            'ɬ': 'l',\n            'ľ': 'l',\n            'ļ': 'l',\n            'ḽ': 'l',\n            'ȴ': 'l',\n            'ḷ': 'l',\n            'ḹ': 'l',\n            'ⱡ': 'l',\n            'ꝉ': 'l',\n            'ḻ': 'l',\n            'ŀ': 'l',\n            'ɫ': 'l',\n            'ᶅ': 'l',\n            'ɭ': 'l',\n            'ł': 'l',\n            'ǉ': 'lj',\n            'ſ': 's',\n            'ẜ': 's',\n            'ẛ': 's',\n            'ẝ': 's',\n            'ḿ': 'm',\n            'ṁ': 'm',\n            'ṃ': 'm',\n            'ɱ': 'm',\n            'ᵯ': 'm',\n            'ᶆ': 'm',\n            'ń': 'n',\n            'ň': 'n',\n            'ņ': 'n',\n            'ṋ': 'n',\n            'ȵ': 'n',\n            'ṅ': 'n',\n            'ṇ': 'n',\n            'ǹ': 'n',\n            'ɲ': 'n',\n            'ṉ': 'n',\n            'ƞ': 'n',\n            'ᵰ': 'n',\n            'ᶇ': 'n',\n            'ɳ': 'n',\n            'ñ': 'n',\n            'ǌ': 'nj',\n            'ó': 'o',\n            'ŏ': 'o',\n            'ǒ': 'o',\n            'ô': 'o',\n            'ố': 'o',\n            'ộ': 'o',\n            'ồ': 'o',\n            'ổ': 'o',\n            'ỗ': 'o',\n            'ö': 'o',\n            'ȫ': 'o',\n            'ȯ': 'o',\n            'ȱ': 'o',\n            'ọ': 'o',\n            'ő': 'o',\n            'ȍ': 'o',\n            'ò': 'o',\n            'ỏ': 'o',\n            'ơ': 'o',\n            'ớ': 'o',\n            'ợ': 'o',\n            'ờ': 'o',\n            'ở': 'o',\n            'ỡ': 'o',\n            'ȏ': 'o',\n            'ꝋ': 'o',\n            'ꝍ': 'o',\n            'ⱺ': 'o',\n            'ō': 'o',\n            'ṓ': 'o',\n            'ṑ': 'o',\n            'ǫ': 'o',\n            'ǭ': 'o',\n            'ø': 'o',\n            'ǿ': 'o',\n            'õ': 'o',\n            'ṍ': 'o',\n            'ṏ': 'o',\n            'ȭ': 'o',\n            'ƣ': 'oi',\n            'ꝏ': 'oo',\n            'ɛ': 'e',\n            'ᶓ': 'e',\n            'ɔ': 'o',\n            'ᶗ': 'o',\n            'ȣ': 'ou',\n            'ṕ': 'p',\n            'ṗ': 'p',\n            'ꝓ': 'p',\n            'ƥ': 'p',\n            'ᵱ': 'p',\n            'ᶈ': 'p',\n            'ꝕ': 'p',\n            'ᵽ': 'p',\n            'ꝑ': 'p',\n            'ꝙ': 'q',\n            'ʠ': 'q',\n            'ɋ': 'q',\n            'ꝗ': 'q',\n            'ŕ': 'r',\n            'ř': 'r',\n            'ŗ': 'r',\n            'ṙ': 'r',\n            'ṛ': 'r',\n            'ṝ': 'r',\n            'ȑ': 'r',\n            'ɾ': 'r',\n            'ᵳ': 'r',\n            'ȓ': 'r',\n            'ṟ': 'r',\n            'ɼ': 'r',\n            'ᵲ': 'r',\n            'ᶉ': 'r',\n            'ɍ': 'r',\n            'ɽ': 'r',\n            'ↄ': 'c',\n            'ꜿ': 'c',\n            'ɘ': 'e',\n            'ɿ': 'r',\n            'ś': 's',\n            'ṥ': 's',\n            'š': 's',\n            'ṧ': 's',\n            'ş': 's',\n            'ŝ': 's',\n            'ș': 's',\n            'ṡ': 's',\n            'ṣ': 's',\n            'ṩ': 's',\n            'ʂ': 's',\n            'ᵴ': 's',\n            'ᶊ': 's',\n            'ȿ': 's',\n            'ɡ': 'g',\n            'ß': 'ss',\n            'ᴑ': 'o',\n            'ᴓ': 'o',\n            'ᴝ': 'u',\n            'ť': 't',\n            'ţ': 't',\n            'ṱ': 't',\n            'ț': 't',\n            'ȶ': 't',\n            'ẗ': 't',\n            'ⱦ': 't',\n            'ṫ': 't',\n            'ṭ': 't',\n            'ƭ': 't',\n            'ṯ': 't',\n            'ᵵ': 't',\n            'ƫ': 't',\n            'ʈ': 't',\n            'ŧ': 't',\n            'ᵺ': 'th',\n            'ɐ': 'a',\n            'ᴂ': 'ae',\n            'ǝ': 'e',\n            'ᵷ': 'g',\n            'ɥ': 'h',\n            'ʮ': 'h',\n            'ʯ': 'h',\n            'ᴉ': 'i',\n            'ʞ': 'k',\n            'ꞁ': 'l',\n            'ɯ': 'm',\n            'ɰ': 'm',\n            'ᴔ': 'oe',\n            'ɹ': 'r',\n            'ɻ': 'r',\n            'ɺ': 'r',\n            'ⱹ': 'r',\n            'ʇ': 't',\n            'ʌ': 'v',\n            'ʍ': 'w',\n            'ʎ': 'y',\n            'ꜩ': 'tz',\n            'ú': 'u',\n            'ŭ': 'u',\n            'ǔ': 'u',\n            'û': 'u',\n            'ṷ': 'u',\n            'ü': 'u',\n            'ǘ': 'u',\n            'ǚ': 'u',\n            'ǜ': 'u',\n            'ǖ': 'u',\n            'ṳ': 'u',\n            'ụ': 'u',\n            'ű': 'u',\n            'ȕ': 'u',\n            'ù': 'u',\n            'ủ': 'u',\n            'ư': 'u',\n            'ứ': 'u',\n            'ự': 'u',\n            'ừ': 'u',\n            'ử': 'u',\n            'ữ': 'u',\n            'ȗ': 'u',\n            'ū': 'u',\n            'ṻ': 'u',\n            'ų': 'u',\n            'ᶙ': 'u',\n            'ů': 'u',\n            'ũ': 'u',\n            'ṹ': 'u',\n            'ṵ': 'u',\n            'ᵫ': 'ue',\n            'ꝸ': 'um',\n            'ⱴ': 'v',\n            'ꝟ': 'v',\n            'ṿ': 'v',\n            'ʋ': 'v',\n            'ᶌ': 'v',\n            'ⱱ': 'v',\n            'ṽ': 'v',\n            'ꝡ': 'vy',\n            'ẃ': 'w',\n            'ŵ': 'w',\n            'ẅ': 'w',\n            'ẇ': 'w',\n            'ẉ': 'w',\n            'ẁ': 'w',\n            'ⱳ': 'w',\n            'ẘ': 'w',\n            'ẍ': 'x',\n            'ẋ': 'x',\n            'ᶍ': 'x',\n            'ý': 'y',\n            'ŷ': 'y',\n            'ÿ': 'y',\n            'ẏ': 'y',\n            'ỵ': 'y',\n            'ỳ': 'y',\n            'ƴ': 'y',\n            'ỷ': 'y',\n            'ỿ': 'y',\n            'ȳ': 'y',\n            'ẙ': 'y',\n            'ɏ': 'y',\n            'ỹ': 'y',\n            'ź': 'z',\n            'ž': 'z',\n            'ẑ': 'z',\n            'ʑ': 'z',\n            'ⱬ': 'z',\n            'ż': 'z',\n            'ẓ': 'z',\n            'ȥ': 'z',\n            'ẕ': 'z',\n            'ᵶ': 'z',\n            'ᶎ': 'z',\n            'ʐ': 'z',\n            'ƶ': 'z',\n            'ɀ': 'z',\n            'ﬀ': 'ff',\n            'ﬃ': 'ffi',\n            'ﬄ': 'ffl',\n            'ﬁ': 'fi',\n            'ﬂ': 'fl',\n            'ĳ': 'ij',\n            'œ': 'oe',\n            'ﬆ': 'st',\n            'ₐ': 'a',\n            'ₑ': 'e',\n            'ᵢ': 'i',\n            'ⱼ': 'j',\n            'ₒ': 'o',\n            'ᵣ': 'r',\n            'ᵤ': 'u',\n            'ᵥ': 'v',\n            'ₓ': 'x',\n        };\n    }\n    transform(text, chars = '\\\\s') {\n        return isString(text)\n            ? text.replace(/[^A-Za-z0-9]/g, (key) => {\n                return this.latinMap[key] || key;\n            })\n            : text;\n    }\n};\nLatinisePipe = __decorate([\n    Pipe({ name: 'latinise' })\n], LatinisePipe);\n\nlet LinesPipe = class LinesPipe {\n    transform(text, chars = '\\\\s') {\n        return isString(text) ? text.replace(/\\r\\n/g, '\\n').split('\\n') : text;\n    }\n};\nLinesPipe = __decorate([\n    Pipe({ name: 'lines' })\n], LinesPipe);\n\nlet UnderscorePipe = class UnderscorePipe {\n    transform(text, chars = '\\\\s') {\n        return isString(text)\n            ? text\n                .trim()\n                .replace(/\\s+/g, '')\n                .replace(/[A-Z]/g, (c, k) => {\n                return k ? `_${c.toLowerCase()}` : c.toLowerCase();\n            })\n            : text;\n    }\n};\nUnderscorePipe = __decorate([\n    Pipe({ name: 'underscore' })\n], UnderscorePipe);\n\nlet MatchPipe = class MatchPipe {\n    transform(text, pattern, flags) {\n        if (!isString(text)) {\n            return text;\n        }\n        return text.match(new RegExp(pattern, flags));\n    }\n};\nMatchPipe = __decorate([\n    Pipe({ name: 'match' })\n], MatchPipe);\n\nlet TestPipe = class TestPipe {\n    transform(text, pattern, flags) {\n        if (!isString(text)) {\n            return text;\n        }\n        return new RegExp(pattern, flags).test(text);\n    }\n};\nTestPipe = __decorate([\n    Pipe({ name: 'test' })\n], TestPipe);\n\nlet LeftPadPipe = class LeftPadPipe {\n    transform(str, length, padCharacter = ' ') {\n        if (!isString(str) || str.length >= length) {\n            return str;\n        }\n        while (str.length < length) {\n            str = padCharacter + str;\n        }\n        return str;\n    }\n};\nLeftPadPipe = __decorate([\n    Pipe({ name: 'lpad' })\n], LeftPadPipe);\n\nlet RightPadPipe = class RightPadPipe {\n    transform(str, length = 1, padCharacter = ' ') {\n        if (!isString(str) || str.length >= length) {\n            return str;\n        }\n        while (str.length < length) {\n            str = str + padCharacter;\n        }\n        return str;\n    }\n};\nRightPadPipe = __decorate([\n    Pipe({ name: 'rpad' })\n], RightPadPipe);\n\nlet MakePluralStringPipe = \n/**\n * Takes a singular entity string and pluralizes it.\n * Uses both naive and holdout-list approaches.\n * If several words appear in the string, only the last word is pluralized -- this\n * means that if \"your story\" was passed in, \"your stories\" would be passed out.\n *\n * @param {string} singularEntity - Entity to pluralize. Pass as a singular ('story' or 'house').\n *          NOTE: The last word is examined. So you can pass in e.g. 'my story'.\n * @param {number} [quantity=0] quantity - How many of the entity are there? If left blank, this will\n *          pluralize the string (e.g. 'story' -> 'stories', 'house' -> 'houses'). If given a value,\n *          this will pluralize appropriately (e.g. ('story', 1) -> 'story', ('story', 2) -> 'stories').\n */\nclass MakePluralStringPipe {\n    constructor() {\n        this.irregularMap = {\n            addendum: 'addenda',\n            alga: 'algae',\n            alumna: 'alumnae',\n            alumnus: 'alumni',\n            analysis: 'analyses',\n            antenna: 'antennae',\n            appendix: 'appendices',\n            aquarium: 'aquaria',\n            arch: 'arches',\n            axe: 'axes',\n            axis: 'axes',\n            bacillus: 'bacilli',\n            bacterium: 'bacteria',\n            basis: 'bases',\n            batch: 'batches',\n            beach: 'beaches',\n            beau: 'beaux',\n            bison: 'bison',\n            brush: 'brushes',\n            buffalo: 'buffaloes',\n            bureau: 'bureaus',\n            bus: 'busses',\n            cactus: 'cacti',\n            calf: 'calves',\n            chateau: 'chateaux',\n            cherry: 'cherries',\n            child: 'children',\n            church: 'churches',\n            circus: 'circuses',\n            cod: 'cod',\n            corps: 'corps',\n            corpus: 'corpora',\n            crisis: 'crises',\n            criterion: 'criteria',\n            curriculum: 'curricula',\n            datum: 'data',\n            deer: 'deer',\n            diagnosis: 'diagnoses',\n            die: 'dice',\n            domino: 'dominoes',\n            dwarf: 'dwarves',\n            echo: 'echoes',\n            elf: 'elves',\n            ellipsis: 'ellipses',\n            embargo: 'embargoes',\n            emphasis: 'emphases',\n            erratum: 'errata',\n            fax: 'faxes',\n            fireman: 'firemen',\n            fish: 'fish',\n            flush: 'flushes',\n            focus: 'foci',\n            foot: 'feet',\n            formula: 'formulas',\n            fungus: 'fungi',\n            genus: 'genera',\n            goose: 'geese',\n            grafito: 'grafiti',\n            half: 'halves',\n            hero: 'heroes',\n            hoax: 'hoaxes',\n            hoof: 'hooves',\n            hypothesis: 'hypotheses',\n            index: 'indices',\n            kiss: 'kisses',\n            knife: 'knives',\n            leaf: 'leaves',\n            life: 'lives',\n            loaf: 'loaves',\n            louse: 'lice',\n            man: 'men',\n            mango: 'mangoes',\n            matrix: 'matrices',\n            means: 'means',\n            medium: 'media',\n            memorandum: 'memoranda',\n            millennium: 'milennia',\n            moose: 'moose',\n            mosquito: 'mosquitoes',\n            motto: 'mottoes',\n            mouse: 'mice',\n            nebula: 'nebulae',\n            neurosis: 'neuroses',\n            nucleus: 'nuclei',\n            oasis: 'oases',\n            octopus: 'octopodes',\n            ovum: 'ova',\n            ox: 'oxen',\n            paralysis: 'paralyses',\n            parenthesis: 'parentheses',\n            person: 'people',\n            phenomenon: 'phenomena',\n            plateau: 'plateaux',\n            potato: 'potatoes',\n            quiz: 'quizzes',\n            radius: 'radii',\n            reflex: 'reflexes',\n            'runner-up': 'runners-up',\n            scampo: 'scampi',\n            scarf: 'scarves',\n            scissors: 'scissors',\n            scratch: 'scratches',\n            self: 'selves',\n            series: 'series',\n            sheaf: 'sheaves',\n            sheep: 'sheep',\n            shelf: 'shelves',\n            'son-in-law': 'sons-in-law',\n            species: 'species',\n            splash: 'splashes',\n            stimulus: 'stimuli',\n            stitch: 'stitches',\n            stratum: 'strata',\n            syllabus: 'syllabi',\n            symposium: 'symposia',\n            synopsis: 'synopses',\n            synthesis: 'syntheses',\n            tableau: 'tableaux',\n            tax: 'taxes',\n            that: 'those',\n            thesis: 'theses',\n            thief: 'thieves',\n            this: 'these',\n            tomato: 'tomatoes',\n            tooth: 'teeth',\n            tornado: 'tornadoes',\n            torpedo: 'torpedoes',\n            vertebra: 'vertebrae',\n            veto: 'vetoes',\n            vita: 'vitae',\n            volcano: 'volcanoes',\n            waltz: 'waltzes',\n            wash: 'washes',\n            watch: 'watches',\n            wharf: 'wharves',\n            wife: 'wives',\n            wolf: 'wolves',\n            woman: 'women',\n            zero: 'zeroes',\n        };\n    }\n    transform(singularEntity, quantity = 0) {\n        if (!singularEntity || singularEntity === '') {\n            return '';\n        }\n        if (quantity === 1) {\n            return singularEntity;\n        }\n        else {\n            const lastWord = singularEntity.trim().split(' ')[singularEntity.trim().split(' ').length - 1];\n            if (this.irregularMap[lastWord.toLocaleLowerCase()]) {\n                if (lastWord[0] === lastWord[0].toLocaleUpperCase()) {\n                    return singularEntity.replace(lastWord, this.irregularMap[lastWord.toLocaleLowerCase()].replace(this.irregularMap[lastWord.toLocaleLowerCase()][0], this.irregularMap[lastWord.toLocaleLowerCase()][0].toLocaleUpperCase()));\n                }\n                return singularEntity.replace(lastWord, this.irregularMap[lastWord.toLocaleLowerCase()]);\n            }\n            else if (lastWord[lastWord.length - 1] === 'y') {\n                // Naive approach:\n                // consonant+y = word - 'y' +'ies'\n                // vowel+y = word + 's'\n                return isVowel(lastWord[lastWord.length - 2])\n                    ? singularEntity + 's'\n                    : singularEntity.replace(lastWord, lastWord.slice(0, -1) + 'ies');\n            }\n            else if (lastWord[lastWord.length - 1] === 's') {\n                return singularEntity + 'es';\n            }\n            else {\n                return singularEntity + 's';\n            }\n        }\n    }\n};\nMakePluralStringPipe = __decorate([\n    Pipe({\n        name: 'makePluralString',\n    })\n    /**\n     * Takes a singular entity string and pluralizes it.\n     * Uses both naive and holdout-list approaches.\n     * If several words appear in the string, only the last word is pluralized -- this\n     * means that if \"your story\" was passed in, \"your stories\" would be passed out.\n     *\n     * @param {string} singularEntity - Entity to pluralize. Pass as a singular ('story' or 'house').\n     *          NOTE: The last word is examined. So you can pass in e.g. 'my story'.\n     * @param {number} [quantity=0] quantity - How many of the entity are there? If left blank, this will\n     *          pluralize the string (e.g. 'story' -> 'stories', 'house' -> 'houses'). If given a value,\n     *          this will pluralize appropriately (e.g. ('story', 1) -> 'story', ('story', 2) -> 'stories').\n     */\n], MakePluralStringPipe);\n\nlet WrapPipe = class WrapPipe {\n    transform(str, prefix = '', suffix = '') {\n        if (!isString(str)) {\n            return str;\n        }\n        return (!!prefix && isString(prefix) ? prefix : '') + str + (!!suffix && isString(suffix) ? suffix : '');\n    }\n};\nWrapPipe = __decorate([\n    Pipe({ name: 'wrap' })\n], WrapPipe);\n\nconst STRING_PIPES = [\n    AorAnPipe,\n    LeftTrimPipe,\n    RepeatPipe,\n    RightTrimPipe,\n    ScanPipe,\n    ShortenPipe,\n    StripTagsPipe,\n    TrimPipe,\n    UcFirstPipe,\n    UcWordsPipe,\n    SlugifyPipe,\n    CamelizePipe,\n    LatinisePipe,\n    LinesPipe,\n    UnderscorePipe,\n    MatchPipe,\n    TestPipe,\n    LeftPadPipe,\n    RightPadPipe,\n    MakePluralStringPipe,\n    WrapPipe,\n];\nlet NgStringPipesModule = class NgStringPipesModule {\n};\nNgStringPipesModule = __decorate([\n    NgModule({\n        declarations: STRING_PIPES,\n        imports: [],\n        exports: STRING_PIPES,\n    })\n], NgStringPipesModule);\n\nlet MaxPipe = class MaxPipe {\n    transform(arr) {\n        return Array.isArray(arr) ? Math.max(...arr) : arr;\n    }\n};\nMaxPipe = __decorate([\n    Pipe({ name: 'max' })\n], MaxPipe);\n\nlet MinPipe = class MinPipe {\n    transform(arr) {\n        return Array.isArray(arr) ? Math.min(...arr) : arr;\n    }\n};\nMinPipe = __decorate([\n    Pipe({ name: 'min' })\n], MinPipe);\n\nlet PercentagePipe = class PercentagePipe {\n    transform(num, total = 100, floor = false) {\n        if (isNaN(num)) {\n            return num;\n        }\n        const percent = (num * 100) / total;\n        return floor ? Math.floor(percent) : percent;\n    }\n};\nPercentagePipe = __decorate([\n    Pipe({ name: 'percentage' })\n], PercentagePipe);\n\nlet SumPipe = class SumPipe {\n    transform(arr) {\n        return Array.isArray(arr) ? arr.reduce((sum, curr) => sum + curr, 0) : arr;\n    }\n};\nSumPipe = __decorate([\n    Pipe({ name: 'sum' })\n], SumPipe);\n\nlet FloorPipe = class FloorPipe {\n    transform(num, precision = 0) {\n        if (precision <= 0) {\n            return Math.floor(num);\n        }\n        const tho = Math.pow(10, precision);\n        return Math.floor(num * tho) / tho;\n    }\n};\nFloorPipe = __decorate([\n    Pipe({ name: 'floor' })\n], FloorPipe);\n\nlet RoundPipe = class RoundPipe {\n    transform(num, precision = 0) {\n        return applyPrecision(num, precision);\n    }\n};\nRoundPipe = __decorate([\n    Pipe({ name: 'round' })\n], RoundPipe);\n\nlet SqrtPipe = class SqrtPipe {\n    transform(num) {\n        return !isNaN(num) ? Math.sqrt(num) : num;\n    }\n};\nSqrtPipe = __decorate([\n    Pipe({ name: 'sqrt' })\n], SqrtPipe);\n\nlet PowerPipe = class PowerPipe {\n    transform(num, power = 2) {\n        return !isNaN(num) ? Math.pow(num, power) : num;\n    }\n};\nPowerPipe = __decorate([\n    Pipe({ name: 'pow' })\n], PowerPipe);\n\nlet CeilPipe = class CeilPipe {\n    transform(num, precision = 0) {\n        if (precision <= 0) {\n            return Math.ceil(num);\n        }\n        const tho = Math.pow(10, precision);\n        return Math.ceil(num * tho) / tho;\n    }\n};\nCeilPipe = __decorate([\n    Pipe({ name: 'ceil' })\n], CeilPipe);\n\nlet DegreesPipe = class DegreesPipe {\n    transform(radians) {\n        if (!isNumberFinite(radians)) {\n            return NaN;\n        }\n        return (radians * 180) / Math.PI;\n    }\n};\nDegreesPipe = __decorate([\n    Pipe({ name: 'degrees' })\n], DegreesPipe);\n\nlet BytesPipe = class BytesPipe {\n    constructor() {\n        this.dictionary = [\n            { max: 1024, type: 'B' },\n            { max: 1048576, type: 'KB' },\n            { max: 1073741824, type: 'MB' },\n            { max: 1.0995116e12, type: 'GB' },\n        ];\n    }\n    transform(value, precision) {\n        if (!isNumberFinite(value)) {\n            return NaN;\n        }\n        const format = this.dictionary.find(d => value < d.max) || this.dictionary[this.dictionary.length - 1];\n        const calc = value / (format.max / 1024);\n        const num = isUndefined(precision) ? calc : applyPrecision(calc, precision);\n        return `${num} ${format.type}`;\n    }\n};\nBytesPipe = __decorate([\n    Pipe({ name: 'bytes' })\n], BytesPipe);\n\nlet RadiansPipe = class RadiansPipe {\n    transform(degrees) {\n        if (!isNumberFinite(degrees)) {\n            return NaN;\n        }\n        return (degrees * Math.PI) / 180;\n    }\n};\nRadiansPipe = __decorate([\n    Pipe({ name: 'radians' })\n], RadiansPipe);\n\nconst MATH_PIPES = [\n    MaxPipe,\n    MinPipe,\n    PercentagePipe,\n    SumPipe,\n    FloorPipe,\n    RoundPipe,\n    SqrtPipe,\n    PowerPipe,\n    CeilPipe,\n    DegreesPipe,\n    BytesPipe,\n    RadiansPipe,\n];\nlet NgMathPipesModule = class NgMathPipesModule {\n};\nNgMathPipesModule = __decorate([\n    NgModule({\n        declarations: MATH_PIPES,\n        imports: [],\n        exports: MATH_PIPES,\n    })\n], NgMathPipesModule);\n\nlet IsDefinedPipe = class IsDefinedPipe {\n    transform(input) {\n        return !isUndefined(input);\n    }\n};\nIsDefinedPipe = __decorate([\n    Pipe({ name: 'isDefined' })\n], IsDefinedPipe);\n\nlet IsNullPipe = class IsNullPipe {\n    transform(input) {\n        return input === null;\n    }\n};\nIsNullPipe = __decorate([\n    Pipe({ name: 'isNull' })\n], IsNullPipe);\n\nlet IsUndefinedPipe = class IsUndefinedPipe {\n    transform(input) {\n        return isUndefined(input);\n    }\n};\nIsUndefinedPipe = __decorate([\n    Pipe({ name: 'isUndefined' })\n], IsUndefinedPipe);\n\nlet IsStringPipe = class IsStringPipe {\n    transform(input) {\n        return isString(input);\n    }\n};\nIsStringPipe = __decorate([\n    Pipe({ name: 'isString' })\n], IsStringPipe);\n\nlet IsFunctionPipe = class IsFunctionPipe {\n    transform(input) {\n        return isFunction(input);\n    }\n};\nIsFunctionPipe = __decorate([\n    Pipe({ name: 'isFunction' })\n], IsFunctionPipe);\n\nlet IsNumberPipe = class IsNumberPipe {\n    transform(input) {\n        return isNumber(input);\n    }\n};\nIsNumberPipe = __decorate([\n    Pipe({ name: 'isNumber' })\n], IsNumberPipe);\n\nlet IsArrayPipe = class IsArrayPipe {\n    transform(input) {\n        return Array.isArray(input);\n    }\n};\nIsArrayPipe = __decorate([\n    Pipe({ name: 'isArray' })\n], IsArrayPipe);\n\nlet IsObjectPipe = class IsObjectPipe {\n    transform(input) {\n        return isObject(input);\n    }\n};\nIsObjectPipe = __decorate([\n    Pipe({ name: 'isObject' })\n], IsObjectPipe);\n\nlet IsGreaterEqualThanPipe = class IsGreaterEqualThanPipe {\n    transform(input, other) {\n        return input >= other;\n    }\n};\nIsGreaterEqualThanPipe = __decorate([\n    Pipe({ name: 'isGreaterEqualThan' })\n], IsGreaterEqualThanPipe);\n\nlet IsGreaterThanPipe = class IsGreaterThanPipe {\n    transform(input, other) {\n        return input > other;\n    }\n};\nIsGreaterThanPipe = __decorate([\n    Pipe({ name: 'isGreaterThan' })\n], IsGreaterThanPipe);\n\nlet IsLessEqualThanPipe = class IsLessEqualThanPipe {\n    transform(input, other) {\n        return input <= other;\n    }\n};\nIsLessEqualThanPipe = __decorate([\n    Pipe({ name: 'isLessEqualThan' })\n], IsLessEqualThanPipe);\n\nlet IsEqualToPipe = class IsEqualToPipe {\n    transform(input, other) {\n        // tslint:disable-next-line:triple-equals\n        return input == other;\n    }\n};\nIsEqualToPipe = __decorate([\n    Pipe({ name: 'isEqualTo' })\n], IsEqualToPipe);\n\nlet IsNotEqualToPipe = class IsNotEqualToPipe {\n    transform(input, other) {\n        // tslint:disable-next-line:triple-equals\n        return input != other;\n    }\n};\nIsNotEqualToPipe = __decorate([\n    Pipe({ name: 'isNotEqualTo' })\n], IsNotEqualToPipe);\n\nlet IsIdenticalToPipe = class IsIdenticalToPipe {\n    transform(input, other) {\n        return input === other;\n    }\n};\nIsIdenticalToPipe = __decorate([\n    Pipe({ name: 'isIdenticalTo' })\n], IsIdenticalToPipe);\n\nlet IsNotIdenticalToPipe = class IsNotIdenticalToPipe {\n    transform(input, other) {\n        return input !== other;\n    }\n};\nIsNotIdenticalToPipe = __decorate([\n    Pipe({ name: 'isNotIdenticalTo' })\n], IsNotIdenticalToPipe);\n\nlet IsLessThanPipe = class IsLessThanPipe {\n    transform(input, other) {\n        return input < other;\n    }\n};\nIsLessThanPipe = __decorate([\n    Pipe({ name: 'isLessThan' })\n], IsLessThanPipe);\n\nconst BOOLEAN_PIPES = [\n    IsDefinedPipe,\n    IsNullPipe,\n    IsUndefinedPipe,\n    IsStringPipe,\n    IsFunctionPipe,\n    IsNumberPipe,\n    IsArrayPipe,\n    IsObjectPipe,\n    IsGreaterEqualThanPipe,\n    IsGreaterThanPipe,\n    IsLessEqualThanPipe,\n    IsLessEqualThanPipe,\n    IsEqualToPipe,\n    IsNotEqualToPipe,\n    IsIdenticalToPipe,\n    IsNotIdenticalToPipe,\n    IsLessThanPipe,\n];\nlet NgBooleanPipesModule = class NgBooleanPipesModule {\n};\nNgBooleanPipesModule = __decorate([\n    NgModule({\n        declarations: BOOLEAN_PIPES,\n        imports: [],\n        exports: BOOLEAN_PIPES,\n    })\n], NgBooleanPipesModule);\n\nvar TimeAgoPipe_1;\nlet TimeAgoPipe = TimeAgoPipe_1 = class TimeAgoPipe {\n    /**\n     * @param inputDate: Date | Moment - not included as TypeScript interface,\n     * in order to keep `ngx-pipes` \"pure\" from dependencies!\n     */\n    transform(inputDate) {\n        if (!inputDate || (!inputDate.getTime && !inputDate.toDate)) {\n            return 'Invalid date';\n        }\n        const past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();\n        const now = +new Date();\n        if (past > now) {\n            return 'in the future';\n        }\n        for (let i = 0, l = TimeAgoPipe_1.MAPPER.length, ms = now - past, div = TimeAgoPipe_1.YEAR_MS; i < l; ++i) {\n            const elm = TimeAgoPipe_1.MAPPER[i];\n            const unit = Math.floor(ms / (div /= elm.div));\n            if (unit >= 1) {\n                return unit === 1 ? elm.single : `${unit} ${elm.many} ago`;\n            }\n        }\n        return 'just now';\n    }\n};\nTimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;\nTimeAgoPipe.MAPPER = [\n    { single: 'last year', many: 'years', div: 1 },\n    { single: 'last month', many: 'months', div: 12 },\n    { single: 'last week', many: 'weeks', div: 4 },\n    { single: 'yesterday', many: 'days', div: 7 },\n    { single: 'an hour ago', many: 'hours', div: 24 },\n    { single: 'just now', many: 'minutes', div: 60 },\n];\nTimeAgoPipe = TimeAgoPipe_1 = __decorate([\n    Pipe({ name: 'timeAgo' })\n], TimeAgoPipe);\n\nconst DATE_PIPES = [TimeAgoPipe];\nlet NgDatePipesModule = class NgDatePipesModule {\n};\nNgDatePipesModule = __decorate([\n    NgModule({\n        declarations: DATE_PIPES,\n        imports: [],\n        exports: DATE_PIPES,\n    })\n], NgDatePipesModule);\n\nlet NgPipesModule = class NgPipesModule {\n};\nNgPipesModule = __decorate([\n    NgModule({\n        exports: [\n            NgArrayPipesModule,\n            NgStringPipesModule,\n            NgMathPipesModule,\n            NgBooleanPipesModule,\n            NgObjectPipesModule,\n            NgDatePipesModule,\n        ],\n    })\n], NgPipesModule);\n\nexport { AorAnPipe, BOOLEAN_PIPES, BytesPipe, CamelizePipe, CeilPipe, ChunkPipe, DATE_PIPES, DegreesPipe, DiffObjPipe, DiffPipe, EveryPipe, FilterByImpurePipe, FilterByPipe, FlattenPipe, FloorPipe, GroupByImpurePipe, GroupByPipe, InitialPipe, IntersectionPipe, InvertByPipe, InvertPipe, IsArrayPipe, IsDefinedPipe, IsEqualToPipe, IsFunctionPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsIdenticalToPipe, IsLessEqualThanPipe, IsLessThanPipe, IsNotEqualToPipe, IsNotIdenticalToPipe, IsNullPipe, IsNumberPipe, IsObjectPipe, IsStringPipe, IsUndefinedPipe, KeysPipe, LatinisePipe, LeftPadPipe, LeftTrimPipe, LinesPipe, MATH_PIPES, MakePluralStringPipe, MatchPipe, MaxPipe, MinPipe, NgArrayPipesModule, NgBooleanPipesModule, NgDatePipesModule, NgMathPipesModule, NgObjectPipesModule, NgPipesModule, NgStringPipesModule, OmitPipe, OrderByImpurePipe, OrderByPipe, PairsPipe, PercentagePipe, PickPipe, PluckPipe, PowerPipe, RangePipe, RepeatPipe, ReversePipe, RightPadPipe, RightTrimPipe, RoundPipe, STRING_PIPES, SamplePipe, ScanPipe, ShortenPipe, ShufflePipe, SlugifyPipe, SomePipe, SqrtPipe, StripTagsPipe, SumPipe, TailPipe, TestPipe, TimeAgoPipe, TrimPipe, TrurthifyPipe, UcFirstPipe, UcWordsPipe, UnderscorePipe, UnionPipe, UniquePipe, ValuesPipe, WithoutPipe, WrapPipe, isString as ɵa, FromPairsPipe as ɵb, RadiansPipe as ɵc };\n//# sourceMappingURL=ngx-pipes.js.map\n","module.exports = \"<nav class=\\\"navbar\\\" style=\\\"background-color: #e3f2fd;\\\">\\n    <a routerLink=\\\"/dashboard/header\\\" class=\\\"btn btn-info\\\" (click)=\\\"loadComponent();\\\">Create Order</a>\\n    <a routerLink=\\\"/dashboard/view\\\" class=\\\"btn btn-info nav_button\\\" >View Orders</a>\\n    <button class=\\\"btn btn-danger buttons\\\" (click)=\\\"logout()\\\">logout</button>\\n</nav>\\n<div class=\\\"row\\\">\\n    <div class=\\\"col logsinput\\\">\\n        Logged in as: {{username}}\\n    </div>\\n</div>\\n<!--<div class=\\\"container \\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col colspan=9\\\">\\n        </div>\\n        <div class=\\\"col\\\">\\n            <button class=\\\"btn btn-danger buttons\\\" (click)=\\\"logout()\\\">logout</button>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <p>\\n                Dashboard page for: {{username}}\\n            </p>\\n            \\n        </div>\\n    </div>\\n</div>\\n\\n<a routerLink=\\\"/dashboard/header\\\" class=\\\"btn btn-info\\\">Header</a> -->\\n<router-outlet></router-outlet>\\n\"","module.exports = \"<div class=\\\"container jumbotron\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h2 class=\\\"bg-secondary text-center text-white mt-3\\\">Enter order header details</h2>\\n            <form action=\\\"\\\" [formGroup]=\\\"fmdetails\\\">\\n                <table class=\\\"table table-bordered m-4\\\" width=\\\"350\\\">\\n                    <tr>\\n                        <td> <label>Customer Name:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" place-holder=\\\"Enter customer name\\\" formControlName=\\\"cust_name\\\" required>\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Order Number:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" formControlName=\\\"order_number\\\">\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Customer Address:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\"\\n                                [ngClass]=\\\"{'is-invalid': formdata.cust_address.touched && formdata.cust_address.invalid}\\\"\\n                                formControlName=\\\"cust_address\\\">\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Payment Type:</label> </td>\\n                        <td>\\n                            <select formControlName=\\\"payment_type\\\">\\n                                <option disabled selected value=\\\"none\\\">--choose a value--</option>\\n                                <option value=\\\"cash\\\">Cash</option>\\n                                <option value=\\\"card\\\">Card</option>\\n                            </select>\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Customer Type:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"is-valid\\\"\\n                                [ngClass]=\\\"{'is-invalid': (formdata.cust_type.dirty || formdata.cust_type.touched) && formdata.cust_type.invalid }\\\"\\n                                formControlName=\\\"cust_type\\\" required>\\n                            <div class=\\\"invalid-feedback\\\" *ngIf=\\\"formdata.cust_type.invalid\\\">\\n                                custtype is required.\\n                            </div>\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> {{this.fmdetails.value | json}} </td>\\n                        <td>\\n                            <div>\\n                                <a class=\\\"btn btn-info\\\"\\n                                    (click)=\\\"submitheader();\\\">Save->Lines Component</a>\\n                                <a routerLink=\\\"/dashboard/header\\\" class=\\\"btn btn-danger\\\"\\n                                    (click)=\\\"clearform();\\\">Clear</a>\\n                            </div>\\n                        </td>\\n                    </tr>\\n                </table>\\n                <div class=\\\"alert alert-success\\\" *ngIf=\\\"headerSaved\\\">\\n                    Header is saved. Proceed to lines component.\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n</div>\\n<!--\\n\\n<div class=\\\"container jumbotron\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h2 class=\\\"bg-secondary text-center text-white mt-3\\\">Enter order header details</h2>\\n           <form class=\\\"container\\\" >\\n                <table class=\\\"table table-bordered m-4\\\" width=\\\"350\\\">\\n                    <tr>\\n                        <td> <label>Customer Name:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"custName\\\" place-holder=\\\"Enter customer name\\\"\\n                                [(ngModel)]=\\\" headerObj.cust_name \\\" [readonly]=\\\"headerReadonly\\\"> {{ headerObj.cust_name}}\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Order Number:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"orderNumber\\\" place-holder=\\\"Enter Order Number\\\"\\n                                [(ngModel)]=\\\"max_order_number\\\" readonly>\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Customer Address:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"custAddress\\\" place-holder=\\\"Enter customer address\\\"\\n                                [(ngModel)]=\\\"headerObj.cust_address\\\" [readonly]=\\\"headerReadonly\\\">\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Payment Type:</label> </td>\\n                        <td >\\n                          <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"paymentType\\\" place-holder=\\\"Enter payment type\\\"\\n                                [(ngModel)]=\\\"headerObj.payment_type\\\" [readonly]=\\\"headerReadonly\\\"> \\n\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Customer Type:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"custType\\\" place-holder=\\\"Enter customer type\\\"\\n                                [(ngModel)]=\\\"headerObj.cust_type\\\" [readonly]=\\\"headerReadonly\\\">\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Order Total:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"orderTotal\\\" \\n                                [(ngModel)]=\\\"headerObj.order_total\\\" disabled>\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> {{headerObj | json}}  </td>\\n                        <td>\\n                            <a routerLink=\\\"/dashboard/header/lines\\\"  class=\\\"btn btn-info\\\"  (click)=\\\"saveHeaderData();\\\">Save->Lines Component</a>\\n                            <!-- [queryParams]=\\\"headerObj\\\" -->\\n                           \\n                    <!--      </td>\\n                    </tr>\\n                </table>\\n                <div class=\\\"alert alert-success\\\" *ngIf=\\\"headerSaved\\\">Header is saved. Proceed to lines component.</div>\\n            </form>\\n        </div>\\n    </div>\\n</div>\\n-->\\n<!--<form action=\\\"\\\" class=\\\"container\\\" [formGroup]=\\\"headerForm\\\">\\n\\n    <div class=\\\"jumbotron\\\">\\n            <div class=\\\"row container\\\">\\n                    <div class=\\\"col  p-3 bg-primary\\\">\\n                        <h1 class=\\\"text-left\\\">Header Information</h1>\\n                    </div>\\n                </div>\\n                <div class=\\\"row mt-5\\\">\\n    \\n                </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n                Customer Name: <input formControlName=\\\"custName\\\" type=\\\"text\\\"  placeholder=\\\"Enter Customer name\\\" [(ngModel)]=\\\"objHeader.custName\\\">\\n            </div>\\n            <div class=\\\"col\\\">\\n                Customer Address: <input formControlName=\\\"custAddress\\\" type=\\\"text\\\" [(ngModel)]=\\\"objHeader.custAddress\\\">\\n            </div>\\n        </div>\\n        <div class=\\\"row mt-3\\\">\\n                <div class=\\\"col\\\">\\n                    Payment type:  <input formControlName=\\\"paymentType\\\" type=\\\"text\\\" [(ngModel)]=\\\"objHeader.paymentType\\\">\\n                </div>\\n                <div class=\\\"col\\\">\\n                    Customer Type: <input formControlName=\\\"custType\\\" [(ngModel)]=\\\"objHeader.custType\\\">\\n                </div>\\n        </div>\\n        <div class=\\\"row mt-3\\\">\\n            <div class=\\\"col\\\">\\n                Order Total: <input type=\\\"text\\\" formControlName=\\\"orderTotal\\\" [(ngModel)]=\\\"objHeader.orderTotal\\\">\\n            </div>\\n            <div class=\\\"col mt-3\\\">\\n                    {{objHeader | json }}\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col mt-5\\\">\\n                <input type=\\\"button\\\" value=\\\"Lines\\\" name=\\\"Lines\\\" class=\\\"btn btn-success\\\" (click)=\\\"headerData();\\\">\\n                <a routersLink=\\\"lines\\\" class=\\\"btn btn-info\\\">Lines</a>\\n            </div>\\n    \\n        </div>\\n    \\n    </div>\\n   \\n \\n    </form>\\n    <app-lines [mydata]=\\\"data\\\" (passData)=\\\"addData($event)\\\"></app-lines> \\n<div class=\\\"col mt-5\\\">\\n    <input type=\\\"button\\\" value=\\\"Lines\\\" name=\\\"Lines\\\" class=\\\"btn btn-success\\\" (click)=\\\"headerData();\\\">\\n</div>\\n<a routerLink=\\\"/dashboard/header/lines\\\" class=\\\"btn btn-info\\\">Save->Lines Component</a>\\n<router-outlet  (passData)='addDataToLines($event)'></router-outlet>-->\\n<router-outlet></router-outlet>\\n<!--<router-outlet [headerObj]='headerObj'></router-outlet>-->\\n<!-- <a routerLink=\\\"/dashboard/header/lines\\\" class=\\\"btn btn-info\\\">Save->Lines Component</a> -->\"","module.exports = \"<p>lines works!</p>\\n\\n<div class=\\\"container \\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n<!--\\n            <form action=\\\"\\\" *ngIf=\\\"formShow\\\">\\n                <table>\\n                    <tr>\\n                        <td>Cust Id</td>\\n                        <td><input type=\\\"text\\\" name=\\\"id\\\" [(ngModel)]=\\\"formData.id\\\"></td>\\n                        <td>Cust Name</td>\\n                        <td><input type=\\\"text\\\" name=\\\"custName\\\" [(ngModel)]=\\\"formData.custName\\\"></td>\\n                        <td>Cust Address</td>\\n                        <td><input type=\\\"text\\\" name=\\\"custAddress\\\" [(ngModel)]=\\\"formData.custAddress\\\"></td>\\n                    </tr>\\n                    <tr>\\n                        <td>Payment Type</td>\\n                        <td><input type=\\\"text\\\" name=\\\"paymentType\\\" [(ngModel)]=\\\"formData.paymentType\\\"></td>\\n                        <td>Cust Type</td>\\n                        <td><input type=\\\"text\\\" name=\\\"custType\\\" [(ngModel)]=\\\"formData.custType\\\"></td>\\n                        <td>Order Total</td>\\n                        <td><input type=\\\"text\\\" name=\\\"orderTotal\\\" [(ngModel)]=\\\"formData.orderTotal\\\"></td>\\n                        <td><button class=\\\"btn btn-success\\\" (click)=\\\"addData();\\\">Save</button></td>\\n                    </tr>\\n                </table>\\n            </form>\\n            <table class=\\\"table table-bordered table-hover mt-3\\\">\\n                <tr>\\n                    <th>\\n                        <button (click)=\\\"displayform();\\\">\\n                            Add Orders\\n                        </button>\\n                    </th>\\n                    <th colspan=\\\"3\\\">\\n\\n                    </th>\\n                </tr>\\n                <tr>\\n                    <th>Cust id </th>\\n                    <th> Cust Name</th>\\n                    <th>custAddress </th>\\n                    <th>paymentType </th>\\n                    <th>custType </th>\\n                    <th>orderTotal </th>\\n                </tr>\\n                <tr *ngFor=\\\"let row of data\\\">\\n                    <td>{{ row.id}}</td>\\n                    <td>{{row.custName}}</td>\\n                    <td>{{row.custAddress}}</td>\\n                    <td>{{row.paymentType}}</td>\\n                    <td>{{row.custType}}</td>\\n                    <td>{{row.orderTotal}}</td>\\n                </tr>\\n            </table> -->\\n            <!--Below is my key line details -->\\n            <table class=\\\"table table-striped table-bordered table-hover mt-3\\\" width=\\\"350\\\">\\n                    <tr>\\n                    <th>\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"addLines();\\\">\\n                            Add Lines\\n                        </button>\\n                    </th>\\n                    <th colspan=\\\"5\\\">\\n\\n                    </th>\\n                </tr>\\n                <tr>\\n                    <th> Line Num </th>\\n                    <th> Item Name</th>\\n                    <th> Quantity </th>\\n                    <th> Warehouse </th>\\n                    <th>Order Number </th>\\n                </tr>\\n                <tbody>\\n                <tr *ngFor=\\\"let row of LineData\\\" >\\n                    <td><input type=\\\"text\\\" name=\\\"linenum\\\" [(ngModel)]=\\\"row.linenum\\\" disabled></td>\\n                    <td><input type=\\\"text\\\" name=\\\"itemname\\\" [(ngModel)]=\\\"row.itemname\\\" required> </td>\\n                    <td><input type=\\\"text\\\" name=\\\"quantity\\\" [(ngModel)]=\\\"row.quantity\\\" required> </td>\\n                    <td><input type=\\\"text\\\" name=\\\"warehouse\\\" [(ngModel)]=\\\"row.warehouse\\\"> </td>\\n                    <td><input type=\\\"text\\\" name=\\\"ordernumber\\\" [(ngModel)]=\\\"row.ordernumber\\\" disabled></td>\\n                    \\n                </tr> \\n                </tbody>\\n               <!-- <tr *ngFor=\\\"let row of LineData\\\" >\\n                    <td><input type=\\\"text\\\" name=\\\"linenum\\\"  value=\\\"{{row.linenum}}\\\" disabled></td>\\n                    <td><input type=\\\"text\\\" name=\\\"itemname\\\"  value=\\\"{{row.itemname}}\\\" > </td>\\n                    <td><input type=\\\"text\\\" name=\\\"quantity\\\" value=\\\"{{row.quantity}}\\\" > </td>\\n                    <td><input type=\\\"text\\\" name=\\\"warehouse\\\" value=\\\"{{row.warehouse}}\\\" > </td>\\n                    <td><input type=\\\"text\\\" name=\\\"custname\\\" value=\\\"{{row.custname}}\\\" ></td>\\n                    <td><input type=\\\"text\\\" name=\\\"ordernumber\\\" value=\\\"{{row.ordernumber}}\\\"  disabled></td>                    \\n                </tr> -->\\n                <tr>\\n                    <th>\\n                        <a routerLink=\\\"/dashboard\\\"  class=\\\"btn btn-primary\\\"  (click)=\\\"saveLines();\\\">Save</a>\\n                            \\n                       <!-- <button class=\\\"btn btn-primary\\\" (click)=\\\"saveLines();\\\"> save </button> -->\\n                    </th>\\n                </tr>\\n            </table>\\n        </div>\\n    </div>\\n</div>\"","module.exports = \"<div class=\\\"container jumbotron\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <h2 class=\\\"bg-secondary text-center text-white mt-3\\\">Update order details</h2>\\n           <form class=\\\"container\\\" >\\n                <table class=\\\"table table-bordered m-4\\\" width=\\\"350\\\">\\n                    <tr>\\n                        <td> <label>Customer Name:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"custName\\\" place-holder=\\\"Enter customer name\\\"\\n                                [(ngModel)]=\\\"headerObj.cust_name\\\" [readonly]=\\\"headerReadonly\\\"> {{ headerObj.cust_name}}\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Order Number:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"orderNumber\\\" place-holder=\\\"Enter Order Number\\\"\\n                                [(ngModel)]=\\\"headerObj.order_number\\\" readonly>\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Customer Address:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"custAddress\\\" place-holder=\\\"Enter customer address\\\"\\n                                [(ngModel)]=\\\"headerObj.cust_address\\\" [readonly]=\\\"headerReadonly\\\">\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Payment Type:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"paymentType\\\" place-holder=\\\"Enter payment type\\\"\\n                                [(ngModel)]=\\\"headerObj.payment_type\\\" [readonly]=\\\"headerReadonly\\\">\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Customer Type:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"custType\\\" place-holder=\\\"Enter customer type\\\"\\n                                [(ngModel)]=\\\"headerObj.cust_type\\\" [readonly]=\\\"headerReadonly\\\">\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> <label>Order Total:</label> </td>\\n                        <td>\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"orderTotal\\\" \\n                                [(ngModel)]=\\\"headerObj.order_total\\\" disabled>\\n                        </td>\\n                    </tr>\\n                    <tr>\\n                        <td> {{headerObj | json}}  </td>\\n                        <td>\\n                            <a  class=\\\"btn btn-info\\\"  (click)=\\\"updateHeaderData();\\\">Update</a>\\n                            <a routerLink=\\\"/dashboard/view\\\" class=\\\"btn btn-danger\\\" >Cancel</a>\\n                            <!--<button class=\\\"btn btn-danger\\\" (click)=\\\"backToView();\\\"> Cancel </button>\\n                             [queryParams]=\\\"headerObj\\\" -->\\n                           \\n                        </td>\\n                    </tr>\\n                </table>\\n                <div class=\\\"alert alert-success\\\" *ngIf=\\\"headerSaved\\\">Header is saved. Proceed to lines component.</div>\\n            </form>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"container \\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <table class=\\\"table table-striped table-bordered table-hover mt-3\\\" width=\\\"350\\\">\\n                <tr>\\n                    <th> Line Num </th>\\n                    <th> Item Name</th>\\n                    <th> Quantity </th>\\n                    <th> Warehouse </th>\\n                    <th>Order Number </th>\\n                </tr>\\n                <tbody>\\n                <tr *ngFor=\\\"let row of lineobjects\\\" >\\n                    <td><input type=\\\"text\\\" name=\\\"linenum\\\" [(ngModel)]=\\\"row.line_number\\\" disabled></td>\\n                    <td><input type=\\\"text\\\" name=\\\"itemname\\\" [(ngModel)]=\\\"row.item_name\\\" [readonly]=\\\"lineReadonly\\\"> </td>\\n                    <td><input type=\\\"text\\\" name=\\\"quantity\\\" [(ngModel)]=\\\"row.quantity\\\" [readonly]=\\\"lineReadonly\\\"> </td>\\n                    <td><input type=\\\"text\\\" name=\\\"warehouse\\\" [(ngModel)]=\\\"row.warehouse\\\" [readonly]=\\\"lineReadonly\\\"> </td>\\n                    <td><input type=\\\"text\\\" name=\\\"ordernumber\\\" [(ngModel)]=\\\"row.order_number\\\" disabled></td>\\n                    <td> <a class=\\\"btn btn-primary\\\"  (click)=\\\"updateLine(row);\\\">Save</a></td>      \\n                </tr> \\n                </tbody>\\n               <tr>\\n                    <th>\\n                        <a routerLink=\\\"/dashboard/view\\\" class=\\\"btn btn-danger\\\" >Cancel</a>\\n                     </th>\\n                </tr>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \"<p>orderview works!</p>\\n\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"mt-3\\\">\\n        <input type=\\\"text\\\" placeholder=\\\"search data\\\" name=\\\"search\\\" [(ngModel)]=\\\"search\\\" />\\n      <div class=\\\"row\\\">\\n        <small>Search on Order Number, Customer, Item</small>\\n      </div>\\n  </div>\\n    <table class=\\\"table table-striped table-bordered mt-4\\\" >\\n      <thead>\\n          <tr>\\n            <th>Order Number</th>\\n            <th>Customer</th>\\n            <th>Line Number</th>\\n            <th>Item</th>\\n            <th>Line Quantity</th>\\n            <th>Order Total</th>\\n            <th>Actions</th>\\n          </tr>\\n      </thead>\\n      <tbody>\\n         <!--<tr *ngFor=\\\"let header of headers | slice: 0: 9\\\"> -->\\n       <tr  *ngFor=\\\"let header of headers | filterBy: ['order_number' , 'cust_name' , 'item_name'] : search | slice: 0: 7 \\\">\\n          <td >{{ header.order_number }}</td>\\n          <td >{{ header.cust_name }}</td>\\n          <td >{{ header.line_number }}</td>\\n          <td >{{ header.item_name }}</td>\\n          <td >{{ header.quantity }}</td>\\n          <td >{{ header.order_otal }}</td>\\n          <td> \\n            <!--<a routerLink=\\\"/dashboard/orderdetail/{{header.order_number}}\\\" class=\\\"btn btn-info\\\">view</a> -->\\n            <a routerLink=\\\"/dashboard/orderedit/{{header.order_number}}\\\" class=\\\"btn btn-success\\\">edit</a>\\n            <button class=\\\"btn btn-danger\\\" (click)=\\\"deleteOrder(header);\\\">Delete</button>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\"","module.exports = \".buttons {\\n  position: absolute;\\n  top: 10px;\\n  right: 10px;\\n}\\n\\n.nav_button {\\n  vertical-align: middle;\\n  position: relative;\\n  height: 45px;\\n  line-height: 50px;\\n  width: 140px;\\n  margin: auto;\\n}\\n\\n.logsinput {\\n  width: 100%;\\n  padding: 12px 20px;\\n  margin: 8px 0;\\n  box-sizing: border-box;\\n  color: blue;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL0Q6XFxBbmd1bGFyXFxyZWdpc0hlYWRlckxpbmVzX3Byb2ovc3JjXFxhcHBcXGRhc2hib2FyZFxcZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7RUFDQyxTQUFBO0VBQ0EsV0FBQTtBQ0NMOztBRENDO0VBRUcsc0JBQUE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0FDQ0o7O0FEQ0M7RUFDRyxXQUFBO0VBQ0Esa0JBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxXQUFBO0FDRUoiLCJmaWxlIjoic3JjL2FwcC9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmJ1dHRvbnMge1xyXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XHJcbiAgICAgdG9wOjEwcHg7XHJcbiAgICAgcmlnaHQ6MTBweDtcclxuIH1cclxuIC5uYXZfYnV0dG9ue1xyXG4gICBcclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBoZWlnaHQ6IDQ1cHg7XHJcbiAgICBsaW5lLWhlaWdodDogNTBweDtcclxuICAgIHdpZHRoOiAxNDBweDtcclxuICAgIG1hcmdpbjogYXV0bztcclxuIH1cclxuIC5sb2dzaW5wdXQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nOiAxMnB4IDIwcHg7XHJcbiAgICBtYXJnaW46IDhweCAwO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIGNvbG9yOiBibHVlXHJcbiAgfSIsIi5idXR0b25zIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEwcHg7XG4gIHJpZ2h0OiAxMHB4O1xufVxuXG4ubmF2X2J1dHRvbiB7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiA0NXB4O1xuICBsaW5lLWhlaWdodDogNTBweDtcbiAgd2lkdGg6IDE0MHB4O1xuICBtYXJnaW46IGF1dG87XG59XG5cbi5sb2dzaW5wdXQge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTJweCAyMHB4O1xuICBtYXJnaW46IDhweCAwO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBjb2xvcjogYmx1ZTtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport {LocalStorageService} from 'ngx-localstorage';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  public username;\n\n  constructor(private local: LocalStorageService  , private router: Router) {\n    console.log('Constructor called');\n   }\n\n  ngOnInit() {\n    console.log('Dashboard init');\n    this.username = this.local.get('username');\n    if (this.username == null || this.username === undefined || this.username === '') {\n      this.router.navigate(['/']);\n    }\n    console.log('Dashboard init completed');\n  }\n  loadComponent() {\n    this.router.navigate(['/dashboard/header']);\n  }\n  logout() {\n    this.local.remove('username');\n    this.local.remove('password');\n    this.router.navigate(['/']);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport {NgPipesModule} from 'ngx-pipes';\n\nimport { HeaderComponent } from '../header/header.component';\nimport { LinesComponent } from '../lines/lines.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DashboardComponent } from '../dashboard/dashboard.component';\nimport { ViewComponent } from '../view/view.component';\nimport { OrderviewComponent } from '../orderview/orderview.component';\nimport { OrdereditComponent } from '../orderedit/orderedit.component';\nimport { LogincheckService } from '../logincheck.service';\nimport { DataService } from '../data.service';\nimport { LinedataService } from '../linedata.service';\n\n\nconst routing: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n    children: [ {\n      path: 'header',\n      component: HeaderComponent\n       ,\n       children: [{\n         path: 'lines',\n         component: LinesComponent\n       } ]\n    },\n      {\n        path: 'view',\n        component: ViewComponent\n      },\n      {\n        path: 'orderdetail/:id',\n        component: OrderviewComponent\n      },\n      {\n        path: 'orderedit/:id',\n        component: OrdereditComponent,\n        canActivate: [LogincheckService],\n        resolve: {\n          orderdata : DataService ,\n          linedata : LinedataService\n        }\n      }\n  ]\n  },\n];\n\n@NgModule({\n  declarations: [HeaderComponent , LinesComponent , DashboardComponent ,\n    ViewComponent , OrderviewComponent , OrdereditComponent],\n  imports: [\n    CommonModule, NgPipesModule , RouterModule, FormsModule, ReactiveFormsModule , RouterModule.forChild(routing)\n  ],\n  providers: [DataService , LinedataService]\n})\nexport class DashboardModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { DataService } from '../data.service';\nimport { Router } from '@angular/router';\n\ninterface Header {\n  cust_name: any ;\n  cust_type: any ;\n  order_number: any;\n  cust_address: any ;\n  payment_type: any;\n}\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  fmdetails: FormGroup ;\n  headerData: Header;\n  headerSaved = false ;\n  // tslint:disable-next-line:variable-name\n  public max_order_number: number;\n  constructor(private fb: FormBuilder, private router: Router , private dataservice: DataService) {\n    console.log('In constructor');\n    // this.fmdetails  = this.fb.group({\n    //   cust_name : [''],\n    //   cust_type :  ['', Validators.required],\n    //   order_number :  [{value: '', disabled: true}, Validators.required],\n    //   cust_address :  ['', Validators.required],\n    //   payment_type : ['', Validators.required]\n    // });\n    // console.log(this.fmdetails.value);\n  }\n\n  ngOnInit() {\n    console.log('in header onInit');\n    this.fmdetails  = this.fb.group({\n      cust_name : [''],\n      cust_type :  ['', Validators.required],\n      order_number :  [{value: '', disabled: true}, Validators.required],\n      cust_address :  ['', Validators.required],\n      payment_type : ['', Validators.required]\n    });\n    console.log(this.fmdetails.value);\n    this.dataservice.maxOrderNumber().subscribe\n    (\n     (success) => {\n      console.log(success);\n      this.max_order_number = success.data[0].max_order_number + 1 ;\n      this.fmdetails.patchValue({\n        order_number: this.max_order_number\n      });\n    /*  this.fmdetails.setValue({cust_name: null,\n         cust_type: 'Important' ,\n         order_number: this.max_order_number ,\n         cust_address: null,\n         payment_type: null\n        }); */\n      console.log(this.fmdetails.controls);\n      console.log(this.fmdetails.value);\n     },\n     (error) => {\n       console.log(error);\n     } );\n  }\n\n  get formdata() { return this.fmdetails.controls; }\n\n  submitheader() {\n    console.log(this.fmdetails.controls);\n    if (this.fmdetails.invalid) {\n      alert('Please enter all details');\n      this.router.navigate(['/dashboard/header']);\n      return;\n    }\n    console.log(this.fmdetails.controls);\n    console.log(this.fmdetails.value);\n    this.headerData = this.fmdetails.value ;\n    this.headerData.order_number = this.fmdetails.get('order_number').value;\n    console.log(this.headerData);\n    this.dataservice.header(this.headerData).subscribe\n    (\n     (success) => {\n      console.log(success);\n      this.fmdetails.disable();\n      this.changeMessageHeader();\n      this.headerSaved = true ;\n      this.router.navigate(['/dashboard/header/lines']);\n      console.log('header submission success');\n       },\n     (error) => {\n       console.log(error);\n       alert('Failed to save header. Check log');\n     } );\n    console.log('header submitted');\n  }\n\n  clearform() {\n    console.log('clear form');\n    this.fmdetails.reset();\n    this.fmdetails.enable();\n    //this.fmdetails.controls[order_number].disable({onlySelf: true});\n    this.fmdetails.get('order_number').disable();\n    this.ngOnInit();\n    console.log(this.headerData);\n    this.headerSaved = false ;\n  }\n\n  changeMessageHeader() {\n    console.log('Calling change message');\n    console.log(this.headerData.order_number);\n    this.dataservice.changeMessage(this.headerData.order_number);\n\n  }\n\n}\n\n/*import { Component, OnInit, ViewEncapsulation ,  Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FormBuilder } from '@angular/forms';\nimport { DataService } from '../data.service';\nimport { Router } from '@angular/router';\n\ninterface HeaderContent {\n   header_id ?: any;\n   order_number: any;\n   cust_name: any;\n   cust_address: any;\n   payment_type: any;\n   cust_type: any;\n   order_total ?: any ;\n }\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class HeaderComponent implements OnInit {\n\n  headerReadonly = false ;\n  public  max_order_number;\n  headerSaved = false ;\n  public headerObj: HeaderContent = {\n    header_id : this.max_order_number ,\n    order_number: this.max_order_number ,\n    cust_name: null ,\n    cust_address: null ,\n    payment_type: null ,\n    cust_type: null ,\n    order_total: null\n  };\n  @Output() passData = new EventEmitter();\n\n  data = [\n   ];\n\n\n  ngOnInit() {\n    console.log('in header onInit');\n    console.log(this.data);\n    this.dataservice.maxOrderNumber().subscribe\n    (\n     (success) => {\n      console.log(success);\n      console.log(success.data[0].max_order_number);\n      this.max_order_number = success.data[0].max_order_number + 1 ;\n      console.log(this.max_order_number);\n     },\n     (error) => {\n       console.log(error);\n     } );\n\n  }\n  constructor(private dataservice: DataService , private router: Router) {\n   /* this.dataservice.maxOrderNumber().subscribe\n    (\n     (success) => {\n      console.log(success);\n      console.log(success.data[0].max_order_number);\n      this.max_order_number = success.data[0].max_order_number + 1 ;\n      console.log(this.max_order_number);\n     },\n     (error) => {\n       console.log(error);\n     } );\n\n    this.headerObj = {\n      header_id : this.max_order_number ,\n      order_number: this.max_order_number ,\n      cust_name: null ,\n      cust_address: null ,\n      payment_type: null ,\n      cust_type: null ,\n      order_total: null\n    };*/\n /* }\n\n  public saveHeaderData() {\n    this.headerReadonly = true;\n    this.headerObj.order_number = this.max_order_number;\n    this.headerObj.header_id = this.max_order_number;\n    this.data.push(this.headerObj);\n    console.log(this.headerObj);\n    console.log('Header Data is Submitted');\n    this.passData.emit(this.headerObj); //emitt headerObj data to other components.\n    this.dataservice.header(this.headerObj).subscribe\n    (\n     (success) => {\n      console.log(success);\n      this.headerSaved = true ;\n     },\n     (error) => {\n       console.log(error);\n       this.headerReadonly = false;\n       alert('Failed to save header. Check log');\n     } );\n    this.changeMessageHeader();\n  //  this.dataservice.currentMessage.subscribe(message => this.headerObj.order_number = message);\n  // console.log(this.headerObj.order_number);\n  }\n  changeMessageHeader() {\n    console.log('Calling change message');\n    console.log(this.headerObj.order_number);\n    this.dataservice.changeMessage(this.headerObj.order_number);\n\n  }\n\n}\n*/","import { Injectable } from '@angular/core';\nimport { Resolve, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { DataService } from './data.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LinedataService implements Resolve<Observable<any>> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    console.log(this.dataservice.getLines(route.params.id));\n    return this.dataservice.getLines(route.params.id);\n  }\n\n  constructor(private dataservice: DataService) { }\n}\n","module.exports = \".tr {\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\n\\nth, td {\\n  padding: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGluZXMvRDpcXEFuZ3VsYXJcXHJlZ2lzSGVhZGVyTGluZXNfcHJvai9zcmNcXGFwcFxcbGluZXNcXGxpbmVzLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9saW5lcy9saW5lcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHVCQUFBO0VBQ0EseUJBQUE7QUNDSjs7QURDRTtFQUNFLGFBQUE7QUNFSiIsImZpbGUiOiJzcmMvYXBwL2xpbmVzL2xpbmVzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRyIHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICB9XHJcbiAgdGgsIHRkIHtcclxuICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgfSIsIi50ciB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xufVxuXG50aCwgdGQge1xuICBwYWRkaW5nOiAxNXB4O1xufSJdfQ== */\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { DataService } from '../data.service';\n\ninterface Linesdata {\n  linenum: number ;\n  itemname: any ;\n  quantity: number ;\n  warehouse?: any ;\n  custname?: any ;\n  ordernumber: any ;\n}\n\n@Component({\n  selector: 'app-lines',\n  templateUrl: './lines.component.html',\n  styleUrls: ['./lines.component.scss']\n})\nexport class LinesComponent implements OnInit {\n\n  @Input() mydata: any;\n  @Output() passData = new EventEmitter();\nlocalordernumber ;\n  public LineData: Linesdata[] = [\n //   { linenum: 1, itemname: 'Camera', quantity: 3, warehouse: 'W1', custname: 'Samanta', ordernumber: 121},\n //   { linenum: 2, itemname: 'Bike', quantity: 1, warehouse: 'W3', custname: 'Raj', ordernumber: 121},\n //   { linenum: 3, itemname: 'Pens', quantity: 20, warehouse: 'W2', custname: 'Shannu', ordernumber: 121}\n  ];\n  LineFormData = null;\n\n  formData = {\n    id: null,\n    custName: null,\n    custAddress: null,\n    paymentType: null,\n    custType: null,\n    orderTotal: null\n  };\n  public formShow = false;\n  // data = [\n  //   { id : 1 , custName : 'Srini', custAddress: 'Srini-Address', paymentType: 'Cash', custType: 'Prime', orderTotal: 2000},\n  //   { id : 2 , custName : 'Vasu', custAddress: 'Vasu-Address', paymentType: 'Cash', custType: 'Secondary', orderTotal: 3000},\n  //   { id : 3 , custName : 'Ramu', custAddress: 'Ramu-Address', paymentType: 'Card', custType: 'Prime', orderTotal: 2500},\n  //   { id : 4 , custName : 'Venkat', custAddress: 'Venkat-Address', paymentType: 'Card', custType: 'Prime', orderTotal: 5000},  \n  // ];\n  public data;\n  constructor(private dataService: DataService) {\n    console.log('In lines constructor');\n    console.log(this.data);\n  }\n\n  ngOnInit() {\n    console.log('in lines onInit');\n    console.log(this.mydata);\n    this.data = this.mydata;\n    this.dataService.currentMessage.subscribe(message => this.localordernumber = message);\n    console.log('latest order number' + this.localordernumber);\n   // this.data.currentMessage.subscribe(message => this.localordernumber = message);\n   // console.log(this.localordernumber);\n  }\n\n  displayform() {\n    this.formShow = true;\n    var countRec = this.data.length;\n    this.formData.id = countRec + 1;\n  }\naddDataToLines(data) {\n    console.log('Data passed to lines');\n    console.log(data);\n}\n  addData() {\n    //this.data.push(this.formData) ;\n    this.passData.emit(this.formData); //Passing formdata(Latest rec) to parent component.\n    // console.log(\"Emitting done\");\n    // this.data = this.mydata;\n    // console.log(this.mydata);\n    var countRec = this.data.length;\n    var nextId = countRec + 1;\n    //Creating next rec with empty fields.\n    this.formData = {\n      id: nextId,\n      custName: null,\n      custAddress: null,\n      paymentType: null,\n      custType: null,\n      orderTotal: null\n    };\n  }\n\n  addLines() {\n    console.log('In add lines');\n    var countRec = this.LineData.length;\n    var nextId = countRec + 1;\n    this.LineFormData = {\n      linenum: nextId,\n      itemname: null,\n      quantity: null,\n      warehouse: null,\n      custname: null,\n      ordernumber: this.localordernumber\n    };\n    this.LineData.push(this.LineFormData);\n    console.log(this.LineData);\n  }\n  saveLines() {\n    console.log(this.LineData);\n    if (this.LineData.length == 0 ) {\n      alert('Please add lines.');\n      return;\n    }\n    this.dataService.linesInsert(this.LineData).subscribe(\n      (success) => {\n        console.log(success);\n        alert('Order is created');\n      },\n      (error) => {\n        console.log(error);\n        alert('Order creation failed. Please check log files');\n      }\n    );\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVyZWRpdC9vcmRlcmVkaXQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService } from '../data.service';\nimport { LinedataService } from '../linedata.service';\n\ninterface HeaderContent {\n  header_id ?: any;\n  order_number: any;\n  cust_name: any;\n  cust_address: any;\n  payment_type: any;\n  cust_type: any;\n  order_total ?: any ;\n}\n\n@Component({\n  selector: 'app-orderedit',\n  templateUrl: './orderedit.component.html',\n  styleUrls: ['./orderedit.component.scss']\n})\n\nexport class OrdereditComponent implements OnInit {\n  localid;\n  lineobjects;\n  headerReadonly = false;\n  lineReadonly = false ;\n  public headerObj: HeaderContent ;\n  public headerSaved = false ;\n constructor(private route: ActivatedRoute, private dataservice: DataService, private linedataservice: LinedataService) {\n    console.log(this.route.snapshot.params.id);\n    console.log(this.route.snapshot.params);\n    this.localid = this.route.snapshot.params.id;\n    console.log(this.route.data);\n    this.route.data.subscribe(\n      (success) => {\n        console.log(success.orderdata.data[0]);\n        this.headerObj = success.orderdata.data[0];\n      }\n    );\n    this.route.data.subscribe(\n      (success) => {\n        console.log(success);\n        console.log(success.linedata.data);\n        this.lineobjects = success.linedata.data;\n      }\n    );\n   // this.route.data.map(data => data.orderdata.json()).subscribe((res) => {\n     // console.log(res);\n    // });\n   /* this.dataservice.getHeader(this.localid).subscribe(\n      (success) => {\n        console.log(success);\n        console.log(success.data);\n        this.headerObj = success.data ;\n      },\n      (error) => {\n        console.log(error);\n     }\n    );*/\n\n   }\n\n  ngOnInit() {\n  }\n\n  updateHeaderData() {\n    console.log('In update header data');\n    this.headerReadonly = true;\n    console.log(this.headerObj);\n    this.dataservice.updateHeader(this.headerObj).subscribe(\n    (success) => {\n    console.log(success);\n    this.headerSaved = true ;\n    },\n    (error) => {\n      console.log(error);\n    }\n    );\n  }\n  updateLine(row) {\n    console.log('In updateLine');\n   console.dir(row);\n    this.dataservice.updateLine(row).subscribe(\n      (success) => {\n        console.log(success);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n  updateLines() {\n    this.lineReadonly = true ;\n    console.log('In update lines');\n    console.log(this.lineobjects);\n    this.dataservice.updateLines(this.lineobjects).subscribe(\n      (success) => {\n      console.log(success);\n      },\n      (error) => {\n        console.log(error);\n      }\n\n    )\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVydmlldy9vcmRlcnZpZXcuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-orderview',\n  templateUrl: './orderview.component.html',\n  styleUrls: ['./orderview.component.scss']\n})\nexport class OrderviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".tr {\\n  border: 1px solid;\\n  border-collapse: collapse;\\n}\\n\\nth, td {\\n  padding: 15px;\\n  border: 1px solid;\\n}\\n\\nthead {\\n  background-color: #9da5a5;\\n}\\n\\ninput[type=text] {\\n  width: 25%;\\n  height: 40px;\\n  background-color: #fdfafa;\\n  background-repeat: no-repeat;\\n  padding-left: 13px;\\n  border: 2px solid #4b4e46;\\n  border-radius: 2px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlldy9EOlxcQW5ndWxhclxccmVnaXNIZWFkZXJMaW5lc19wcm9qL3NyY1xcYXBwXFx2aWV3XFx2aWV3LmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC92aWV3L3ZpZXcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxpQkFBQTtFQUNBLHlCQUFBO0FDQ0o7O0FEQ0U7RUFDRSxhQUFBO0VBQ0EsaUJBQUE7QUNFSjs7QURBRTtFQUNFLHlCQUFBO0FDR0o7O0FEREU7RUFDRSxVQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0VBRUEsNEJBQUE7RUFDQSxrQkFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7QUNHSiIsImZpbGUiOiJzcmMvYXBwL3ZpZXcvdmlldy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ciB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZDtcclxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgfVxyXG4gIHRoLCB0ZCB7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgO1xyXG4gIH1cclxuICB0aGVhZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTU3LCAxNjUsIDE2NSkgO1xyXG4gIH1cclxuICBpbnB1dFt0eXBlPXRleHRde1xyXG4gICAgd2lkdGg6IDI1JTtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTMsIDI1MCwgMjUwKTtcclxuXHJcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxM3B4O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDc1LCA3OCwgNzApO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xyXG4gICAgXHJcbiAgfSIsIi50ciB7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xufVxuXG50aCwgdGQge1xuICBwYWRkaW5nOiAxNXB4O1xuICBib3JkZXI6IDFweCBzb2xpZDtcbn1cblxudGhlYWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOWRhNWE1O1xufVxuXG5pbnB1dFt0eXBlPXRleHRdIHtcbiAgd2lkdGg6IDI1JTtcbiAgaGVpZ2h0OiA0MHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmYWZhO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBwYWRkaW5nLWxlZnQ6IDEzcHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkICM0YjRlNDY7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\nimport { Router } from '@angular/router';\ninterface HeaderContent {\n  header_id ?: any;\n  order_number: any;\n  cust_name: any;\n  cust_address: any;\n  payment_type: any;\n  cust_type: any;\n  order_total ?: any ;\n}\n\n@Component({\n  selector: 'app-view',\n  templateUrl: './view.component.html',\n  styleUrls: ['./view.component.scss']\n})\nexport class ViewComponent implements OnInit {\n   headers ;\n   search ;\n  constructor(private dataservice: DataService ,  private router: Router ) {\n    this.dataservice.getHeaders().subscribe(\n      (success) => {\n        console.log(success);\n        this.headers = success.data;\n        console.log(this.headers);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n   }\n\n   deleteOrder(header) {\n    console.log(header.order_number);\n    let orderobjs = this.headers;\n    console.log(orderobjs);\n    console.log(this.headers);\n\n    this.dataservice.deleteOrder(header.order_number).subscribe(\n      (success) => {\n        console.log(success);\n        for ( var i = 0; i < this.headers.length ; i++) {\n          if ( this.headers[i].order_number == header.order_number ) {\n               this.headers.splice(i, 1);\n               console.log(this.headers[i].order_number);\n          }\n        }\n        console.log(this.headers);\n        // console.log(orderobjs.length);\n    /*  for (let i = 0 ; i < orderobjs.length ; i++) {\n         if (orderobjs[i].order_number == id ) {\n          console.log(orderobjs[i]);\n           orderobjs.splice(i,1);\n          console.log(orderobjs);\n         }\n        }\n        this.headers = orderobjs;*/\n      },\n     (error) => {\n      console.log(error);\n     }\n      );\n   }\n  ngOnInit() {\n  }\n\n}\n"],"sourceRoot":""}